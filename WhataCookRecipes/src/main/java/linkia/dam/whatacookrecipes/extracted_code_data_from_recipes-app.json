[
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='The main method that runs the Spring Boot application.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='Command line arguments.'}]}', name=Optional[args]}]}",
    "name": "main",
    "body": "{\n    SpringApplication.run(WhataCookRecipesApplication.class, args);\n}",
    "parameters": "[String[] args]",
    "returnType": "void"
  },
  {
    "javadoc": "",
    "name": "analyze",
    "body": "{\n    File projectDir = new File(OUTPUT_DIR);\n    if (!projectDir.exists() || !projectDir.isDirectory()) {\n        log.error(\"El directorio especificado no existe: {}\", OUTPUT_DIR);\n        return;\n    }\n    List<MethodInfo> extractedData = new ArrayList<>();\n    try {\n        // Crear el directorio de salida si no existe\n        Files.createDirectories(Paths.get(OUTPUT_DIR));\n        // Borrar el contenido existente del archivo\n        final Path pathTo_OUTPUT_FILE = Paths.get(OUTPUT_FILE);\n        Files.deleteIfExists(pathTo_OUTPUT_FILE);\n        extractData(projectDir, extractedData);\n        // Guardar los datos extra√≠dos en un archivo JSON\n        List<Map<String, String>> jsonList = extractedData.stream().map(methodInfo -> {\n            Map<String, String> jsonObject = new HashMap<>();\n            jsonObject.put(\"name\", escapeJson(methodInfo.getName()));\n            jsonObject.put(\"returnType\", escapeJson(methodInfo.getReturnType()));\n            jsonObject.put(\"parameters\", escapeJson(methodInfo.getParameters()));\n            jsonObject.put(\"javadoc\", escapeJson(methodInfo.getJavadoc()));\n            jsonObject.put(\"body\", escapeJson(methodInfo.getBody()));\n            return jsonObject;\n        }).collect(Collectors.toList());\n        String jsonString = toJsonString(jsonList);\n        Files.write(pathTo_OUTPUT_FILE, jsonString.getBytes());\n    } catch (IOException e) {\n        log.error(\"Error while analyzing Java parser: {}\", e.getMessage(), e);\n    }\n}",
    "parameters": "[]",
    "returnType": "void"
  },
  {
    "javadoc": "",
    "name": "escapeJson",
    "body": "{\n    if (input == null) {\n        return \"\";\n    }\n    return input.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\").replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\n}",
    "parameters": "[String input]",
    "returnType": "String"
  },
  {
    "javadoc": "",
    "name": "toJsonString",
    "body": "{\n    StringBuilder jsonString = new StringBuilder(\"[\\n\");\n    for (Map<String, String> jsonObject : jsonList) {\n        jsonString.append(\"  {\\n\");\n        for (Map.Entry<String, String> entry : jsonObject.entrySet()) {\n            jsonString.append(\"    \\\"\").append(entry.getKey()).append(\"\\\": \\\"\").append(entry.getValue()).append(\"\\\",\\n\");\n        }\n        // Remove last comma and newline, then add closing brace\n        jsonString.setLength(jsonString.length() - 2);\n        jsonString.append(\"\\n  },\\n\");\n    }\n    // Remove last comma and newline, then add closing bracket\n    if (!jsonList.isEmpty()) {\n        jsonString.setLength(jsonString.length() - 2);\n    }\n    jsonString.append(\"\\n]\");\n    return jsonString.toString();\n}",
    "parameters": "[List<Map<String, String>> jsonList]",
    "returnType": "String"
  },
  {
    "javadoc": "",
    "name": "extractData",
    "body": "{\n    JavaParser javaParser = new JavaParser();\n    try (Stream<java.nio.file.Path> paths = Files.walk(projectDir.toPath())) {\n        paths.filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\".java\")).forEach(path -> {\n            try {\n                CompilationUnit cu = javaParser.parse(path).getResult().orElseThrow(IOException::new);\n                cu.accept(new MethodVisitor(), extractedData);\n            } catch (IOException e) {\n                log.error(\"Error while extractData() in JavaParserAnalyzer: {}\", e.getMessage(), e);\n            }\n        });\n    }\n}",
    "parameters": "[File projectDir, List<MethodInfo> extractedData]",
    "returnType": "void"
  },
  {
    "javadoc": "",
    "name": "visit",
    "body": "{\n    super.visit(md, collector);\n    MethodInfo methodInfo = new MethodInfo();\n    methodInfo.setName(md.getNameAsString());\n    methodInfo.setReturnType(md.getTypeAsString());\n    methodInfo.setParameters(md.getParameters().toString());\n    methodInfo.setJavadoc(md.getJavadoc().map(Object::toString).orElse(\"\"));\n    methodInfo.setBody(md.getBody().map(Object::toString).orElse(\"\"));\n    collector.add(methodInfo);\n}",
    "parameters": "[MethodDeclaration md, List<MethodInfo> collector]",
    "returnType": "void"
  },
  {
    "javadoc": "",
    "name": "matches",
    "body": "{\n    String environment = System.getenv(\"WHATA_COOK_ENV\");\n    return \"local\".equals(environment);\n}",
    "parameters": "[ConditionContext context, AnnotatedTypeMetadata metadata]",
    "returnType": "boolean"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a '}, JavadocInlineTag{tagName='link', type=LINK, content=' MongoClient'}, JavadocSnippet{text=' bean to connect to MongoDB.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MongoClient'}, JavadocSnippet{text=' instance.'}]}', name=Optional.empty}]}",
    "name": "mongoClient",
    "body": "{\n    return MongoClients.create(mongoUri);\n}",
    "parameters": "[]",
    "returnType": "MongoClient"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReactiveMongoDatabaseFactory'}, JavadocSnippet{text=' bean for reactive database operations.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MongoClient'}, JavadocSnippet{text=' instance.'}]}', name=Optional[mongoClient]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReactiveMongoDatabaseFactory'}, JavadocSnippet{text=' instance.'}]}', name=Optional.empty}]}",
    "name": "reactiveMongoDatabaseFactory",
    "body": "{\n    return new SimpleReactiveMongoDatabaseFactory(mongoClient, DB_NAME);\n}",
    "parameters": "[MongoClient mongoClient]",
    "returnType": "ReactiveMongoDatabaseFactory"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReactiveMongoTemplate'}, JavadocSnippet{text=' bean for reactive database operations.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReactiveMongoDatabaseFactory'}, JavadocSnippet{text=' instance.'}]}', name=Optional[reactiveMongoDatabaseFactory]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MappingMongoConverter'}, JavadocSnippet{text=' instance.'}]}', name=Optional[mappingMongoConverter]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReactiveMongoTemplate'}, JavadocSnippet{text=' instance.'}]}', name=Optional.empty}]}",
    "name": "reactiveMongoTemplate",
    "body": "{\n    return new ReactiveMongoTemplate(reactiveMongoDatabaseFactory, mappingMongoConverter);\n}",
    "parameters": "[ReactiveMongoDatabaseFactory reactiveMongoDatabaseFactory, MappingMongoConverter mappingMongoConverter]",
    "returnType": "ReactiveMongoTemplate"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a '}, JavadocInlineTag{tagName='link', type=LINK, content=' MappingMongoConverter'}, JavadocSnippet{text=' bean to handle MongoDB mappings.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MongoMappingContext'}, JavadocSnippet{text=' instance.'}]}', name=Optional[mongoMappingContext]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MappingMongoConverter'}, JavadocSnippet{text=' instance.'}]}', name=Optional.empty}]}",
    "name": "mappingMongoConverter",
    "body": "{\n    MappingMongoConverter converter = new MappingMongoConverter(NoOpDbRefResolver.INSTANCE, mongoMappingContext);\n    converter.setTypeMapper(new DefaultMongoTypeMapper(null));\n    return converter;\n}",
    "parameters": "[MongoMappingContext mongoMappingContext]",
    "returnType": "MappingMongoConverter"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Configures the resource handlers for the application.\n<p>\nThis method overrides the '}, JavadocInlineTag{tagName='code', type=CODE, content=' addResourceHandlers'}, JavadocSnippet{text=' method from the\n'}, JavadocInlineTag{tagName='code', type=CODE, content=' WebFluxConfigurer'}, JavadocSnippet{text=' interface to add a specific resource handler.\nThe resource handler configures the path to serve static files\nfrom the file system directory '}, JavadocInlineTag{tagName='code', type=CODE, content=' /app/javadoc'}, JavadocSnippet{text=' via the path\n'}, JavadocInlineTag{tagName='code', type=CODE, content=' /api/javadoc/**'}, JavadocSnippet{text='.\n</p>'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the resource handler registry to be used to add the handlers.'}]}', name=Optional[registry]}]}",
    "name": "addResourceHandlers",
    "body": "{\n    registry.addResourceHandler(\"/api/javadoc/**\").addResourceLocations(\"file:/app/javadoc/\");\n}",
    "parameters": "[ResourceHandlerRegistry registry]",
    "returnType": "void"
  },
  {
    "javadoc": "",
    "name": "getJavadoc",
    "body": "{\n    try {\n        Resource resource = new FileSystemResource(\"/app/javadoc/index.html\");\n        if (!resource.exists()) {\n            log.error(\"Javadoc file not found at /app/javadoc/index.html\");\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        byte[] content = Files.readAllBytes(resource.getFile().toPath());\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Content-Type\", \"text/html\");\n        return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    } catch (IOException e) {\n        log.error(\"Error reading Javadoc file: \", e);\n        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}",
    "parameters": "[]",
    "returnType": "ResponseEntity<byte[]>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a measure by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the measure to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getMeasureById",
    "body": "{\n    return measureService.getMeasureById(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a measure by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the measure to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getMeasureByName",
    "body": "{\n    return measureService.getMeasureByNameIgnoreCase(name);\n}",
    "parameters": "[@PathVariable String name]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new measure.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The measure data to create.'}]}', name=Optional[categoryDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createMeasure",
    "body": "{\n    return measureService.createMeasure(categoryDto);\n}",
    "parameters": "[@RequestBody MeasureDto categoryDto]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple measures.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of measures to create.'}]}', name=Optional[categories]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createMeasures",
    "body": "{\n    return measureService.createMeasures(categories);\n}",
    "parameters": "[@RequestBody Flux<MeasureDto> categories]",
    "returnType": "Flux<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a measure by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the measure to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the measure has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteMeasureById",
    "body": "{\n    return measureService.deleteMeasure(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all measures.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllMeasures",
    "body": "{\n    return measureService.deleteAllMeasures();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all categories with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllCategories",
    "body": "{\n    return categoryService.getAllCategories(page, size, mode);\n}",
    "parameters": "[@RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<CategoryDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves categories by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within category names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getCategoriesByNameContaining",
    "body": "{\n    return categoryService.getCategoriesByNameContaining(name, page, size, mode);\n}",
    "parameters": "[@RequestParam String name, @RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<CategoryDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a category by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the category to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getCategoryById",
    "body": "{\n    return categoryService.getCategoryById(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a category by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the category to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getCategoryByName",
    "body": "{\n    return categoryService.getCategoryByNameIgnoreCase(name);\n}",
    "parameters": "[@PathVariable String name]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new category.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The category data to create.'}]}', name=Optional[categoryDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createCategory",
    "body": "{\n    return categoryService.createCategory(categoryDto);\n}",
    "parameters": "[@RequestBody CategoryDto categoryDto]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple categories.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of categories to create.'}]}', name=Optional[categories]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createCategories",
    "body": "{\n    return categoryService.createCategories(categories);\n}",
    "parameters": "[@RequestBody Flux<CategoryDto> categories]",
    "returnType": "Flux<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a category by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the category to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the category has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteCategoryById",
    "body": "{\n    return categoryService.deleteCategory(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all categories.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllCategories",
    "body": "{\n    return categoryService.deleteAllCategories();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all recipes with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllRecipes",
    "body": "{\n    return recipeService.getAllRecipes(page, size, mode);\n}",
    "parameters": "[@RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within recipe names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getRecipesByNameContaining",
    "body": "{\n    return recipeService.getRecipesByNameContaining(name, page, size, mode);\n}",
    "parameters": "[@RequestParam String name, @RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes containing any of the specified ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of ingredient names to search for within recipes.'}]}', name=Optional[ingredients]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "searchRecipesByIngredients",
    "body": "{\n    return recipeService.findRecipesByIngredients(ingredients, page, size, mode);\n}",
    "parameters": "[@RequestParam List<String> ingredients, @RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes containing all of the specified ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of ingredient names to search for within recipes.'}]}', name=Optional[ingredients]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "searchRecipesByAllIngredients",
    "body": "{\n    return recipeService.findRecipesByAllIngredients(ingredients, page, size, mode);\n}",
    "parameters": "[@RequestParam List<String> ingredients, @RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a recipe by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the recipe to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getRecipeById",
    "body": "{\n    return recipeService.getRecipeById(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes by a list of IDs.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of IDs of the recipes to retrieve.'}]}', name=Optional[ids]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a map containing found recipes and not found IDs.'}]}', name=Optional.empty}]}",
    "name": "getRecipesByIds",
    "body": "{\n    return recipeService.getRecipesByIds(ids);\n}",
    "parameters": "[@RequestBody List<String> ids]",
    "returnType": "Mono<Map<String,Object>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a recipe by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the recipe to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getRecipeByName",
    "body": "{\n    return recipeService.getRecipeByName(name);\n}",
    "parameters": "[@PathVariable String name]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new recipe.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The recipe data to create.'}]}', name=Optional[recipeDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createRecipe",
    "body": "{\n    return recipeService.createRecipe(recipeDto);\n}",
    "parameters": "[@RequestBody RecipeDto recipeDto]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple recipes.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of recipes to create.'}]}', name=Optional[recipes]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createRecipes",
    "body": "{\n    return recipeService.createRecipes(recipes);\n}",
    "parameters": "[@RequestBody Flux<RecipeDto> recipes]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a recipe by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the recipe to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the recipe has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteRecipeById",
    "body": "{\n    return recipeService.deleteRecipe(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all recipes.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllRecipes",
    "body": "{\n    return recipeService.deleteAllRecipes();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllCategories",
    "body": "{\n    return ingredientService.getAllCategories(page, size, mode);\n}",
    "parameters": "[@RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<IngredientDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves ingredients by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within ingredient names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getCategoriesByNameContaining",
    "body": "{\n    return ingredientService.getCategoriesByNameContaining(name, page, size, mode);\n}",
    "parameters": "[@RequestParam String name, @RequestParam(required = false) String mode, @RequestParam int page, @RequestParam int size]",
    "returnType": "Mono<Page<IngredientDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves an ingredient by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the ingredient to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getIngredientById",
    "body": "{\n    return ingredientService.getIngredientById(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves ingredients by a list of IDs.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of IDs of the ingredients to retrieve.'}]}', name=Optional[ids]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a map containing found ingredients and not found IDs.'}]}', name=Optional.empty}]}",
    "name": "getIngredientsByIds",
    "body": "{\n    return ingredientService.getIngredientsByIds(ids);\n}",
    "parameters": "[@RequestBody List<String> ids]",
    "returnType": "Mono<Map<String,Object>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves an ingredient by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the ingredient to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getIngredientByName",
    "body": "{\n    return ingredientService.getIngredientByName(name);\n}",
    "parameters": "[@PathVariable String name]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new ingredient.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ingredient data to create.'}]}', name=Optional[ingredientDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createIngredient",
    "body": "{\n    return ingredientService.createIngredient(ingredientDto);\n}",
    "parameters": "[@RequestBody IngredientDto ingredientDto]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple ingredients.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of ingredients to create.'}]}', name=Optional[ingredients]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createCategories",
    "body": "{\n    return ingredientService.createCategories(ingredients);\n}",
    "parameters": "[@RequestBody Flux<IngredientDto> ingredients]",
    "returnType": "Flux<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes an ingredient by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the ingredient to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the ingredient has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteIngredientById",
    "body": "{\n    return ingredientService.deleteIngredient(id);\n}",
    "parameters": "[@PathVariable String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all ingredients.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllCategories",
    "body": "{\n    return ingredientService.deleteAllCategories();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Sort'}, JavadocSnippet{text=' object for sorting by name based on the mode.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Sort'}, JavadocSnippet{text=' object for sorting by name.'}]}', name=Optional.empty}]}",
    "name": "getSortByName",
    "body": "{\n    Sort.Direction direction = isNotNullAndStartWithD(mode) ? Sort.Direction.DESC : Sort.Direction.ASC;\n    return Sort.by(direction, \"name\");\n}",
    "parameters": "[String mode]",
    "returnType": "Sort"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Checks if the mode string is not null and starts with \"d\".'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The mode string to check.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the mode is not null and starts with \"d\", false otherwise.'}]}', name=Optional.empty}]}",
    "name": "isNotNullAndStartWithD",
    "body": "{\n    return mode != null && mode.toLowerCase().startsWith(\"d\");\n}",
    "parameters": "[String mode]",
    "returnType": "boolean"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a paged result from a list of items.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of items to paginate.'}]}', name=Optional[items]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The type of items, extending '}, JavadocInlineTag{tagName='link', type=LINK, content=' NamedEntity'}, JavadocSnippet{text='.'}]}', name=Optional[<T>]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of items.'}]}', name=Optional.empty}]}",
    "name": "createPagedResult",
    "body": "{\n    return Mono.just(items.stream().sorted(getComparator(mode)).skip((long) page * size).limit(size).collect(Collectors.collectingAndThen(Collectors.toList(), list -> new PageImpl<>(list, PageRequest.of(page, size, getSortByName(mode)), items.size()))));\n}",
    "parameters": "[List<T> items, int page, int size, String mode]",
    "returnType": "Mono<Page<T>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a comparator for sorting items based on the mode.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The sorting mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The type of items, extending '}, JavadocInlineTag{tagName='link', type=LINK, content=' NamedEntity'}, JavadocSnippet{text='.'}]}', name=Optional[<T>]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A comparator for sorting items.'}]}', name=Optional.empty}]}",
    "name": "getComparator",
    "body": "{\n    Comparator<T> comparator = Comparator.comparing(NamedEntity::getName);\n    return isNotNullAndStartWithD(mode) ? comparator.reversed() : comparator;\n}",
    "parameters": "[String mode]",
    "returnType": "Comparator<T>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a measure by name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the measure to search for.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' entity, or empty if not found.'}]}', name=Optional.empty}]}",
    "name": "findByNameIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds recipes with names containing the specified string, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within recipe names.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' entities.'}]}', name=Optional.empty}]}",
    "name": "findByNameContainingIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a recipe by name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the recipe to search for.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' entity, or empty if not found.'}]}', name=Optional.empty}]}",
    "name": "findByNameIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds recipes containing any of the specified ingredient names.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='A list of ingredient names to search for within recipes.'}]}', name=Optional[ingredientNames]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' entities.'}]}', name=Optional.empty}]}",
    "name": "findByIngredientsNameIn",
    "body": "",
    "parameters": "[List<String> ingredientNames]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds recipes containing all of the specified ingredient names.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='A list of ingredient names to search for within recipes.'}]}', name=Optional[ingredientNames]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' entities.'}]}', name=Optional.empty}]}",
    "name": "findByAllIngredientsNameIn",
    "body": "",
    "parameters": "[List<String> ingredientNames]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds ingredients with names containing the specified string, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within ingredient names.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' entities.'}]}', name=Optional.empty}]}",
    "name": "findByNameContainingIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Flux<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds an ingredient by name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the ingredient to search for.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' entity, or empty if not found.'}]}', name=Optional.empty}]}",
    "name": "findByNameIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds categories with names containing the specified string, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within category names.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' entities.'}]}', name=Optional.empty}]}",
    "name": "findByNameContainingIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Flux<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a category by name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the category to search for.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the matching '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' entity, or empty if not found.'}]}', name=Optional.empty}]}",
    "name": "findByNameIgnoreCase",
    "body": "",
    "parameters": "[String name]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all recipes with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllRecipes",
    "body": "{\n    return recipeDao.findAll().collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[int page, int size, String mode]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within recipe names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getRecipesByNameContaining",
    "body": "{\n    return recipeDao.findByNameContainingIgnoreCase(name).collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[String name, int page, int size, String mode]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes containing any of the specified ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of ingredient names to search for within recipes.'}]}', name=Optional[ingredientNames]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "findRecipesByIngredients",
    "body": "{\n    return recipeDao.findByIngredientsNameIn(ingredientNames).collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[List<String> ingredientNames, int page, int size, String mode]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes containing all of the specified ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of ingredient names to search for within recipes.'}]}', name=Optional[ingredientNames]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "findRecipesByAllIngredients",
    "body": "{\n    return recipeDao.findByAllIngredientsNameIn(ingredientNames).collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[List<String> ingredientNames, int page, int size, String mode]",
    "returnType": "Mono<Page<RecipeDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a recipe by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the recipe to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getRecipeById",
    "body": "{\n    return recipeDao.findById(id).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Recipe not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves recipes by a list of IDs.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of IDs of the recipes to retrieve.'}]}', name=Optional[ids]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a map containing found recipes and not found IDs.'}]}', name=Optional.empty}]}",
    "name": "getRecipesByIds",
    "body": "{\n    return recipeDao.findAllById(ids).collectList().flatMap(recipes -> {\n        List<String> foundIds = recipes.stream().map(RecipeDto::getId).toList();\n        List<String> notFoundIds = ids.stream().filter(id -> !foundIds.contains(id)).toList();\n        Map<String, Object> result = new HashMap<>();\n        result.put(\"found\", recipes);\n        result.put(\"notFound\", notFoundIds);\n        return Mono.just(result);\n    });\n}",
    "parameters": "[List<String> ids]",
    "returnType": "Mono<Map<String,Object>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a recipe by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the recipe to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getRecipeByName",
    "body": "{\n    return recipeDao.findByNameIgnoreCase(name).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Recipe not found with name=\" + name)));\n}",
    "parameters": "[String name]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple recipes.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The recipes to create.'}]}', name=Optional[recipes]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createRecipes",
    "body": "{\n    return createRecipesComponent.createRecipes(recipes);\n}",
    "parameters": "[Flux<RecipeDto> recipes]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new recipe.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The recipe data to create.'}]}', name=Optional[recipeDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createRecipe",
    "body": "{\n    return createRecipesComponent.createRecipe(recipeDto);\n}",
    "parameters": "[RecipeDto recipeDto]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a recipe by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the recipe to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the recipe has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteRecipe",
    "body": "{\n    return recipeDao.findById(id).flatMap(existingRecipe -> recipeDao.delete(existingRecipe).then(Mono.just(\"Recipe \" + existingRecipe.getName() + \" has been deleted.\"))).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Recipe not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all recipes.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllRecipes",
    "body": "{\n    return recipeDao.deleteAll();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a measure by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the measure to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getMeasureById",
    "body": "{\n    return measureDao.findById(id).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Measure not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a measure by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the measure to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getMeasureByNameIgnoreCase",
    "body": "{\n    return measureDao.findByNameIgnoreCase(name).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Measure not found with name=\" + name)));\n}",
    "parameters": "[String name]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new measure if it does not already exist.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The measure data to create.'}]}', name=Optional[measureDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createMeasure",
    "body": "{\n    return measureDao.findByNameIgnoreCase(measureDto.getName()).switchIfEmpty(Mono.defer(() -> measureDao.save(measureDto)));\n}",
    "parameters": "[MeasureDto measureDto]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple measures.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The measures to create.'}]}', name=Optional[measures]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createMeasures",
    "body": "{\n    return measures.flatMap(this::createMeasure);\n}",
    "parameters": "[Flux<MeasureDto> measures]",
    "returnType": "Flux<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a measure by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the measure to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the measure has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteMeasure",
    "body": "{\n    return measureDao.findById(id).flatMap(existingMeasure -> measureDao.delete(existingMeasure).then(Mono.just(\"Measure \" + existingMeasure.getName() + \" has been deleted.\"))).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Measure not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all measures.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllMeasures",
    "body": "{\n    return measureDao.deleteAll();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple recipes.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of recipes to create.'}]}', name=Optional[recipes]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createRecipes",
    "body": "{\n    return recipes.concatMap(recipe -> Mono.just(recipe).// .delayElement(Duration.ofMillis(50)) // Introduce a delay of 50 ms between each recipe if necessary to avoid race conditions\n    flatMap(this::createRecipe).onErrorResume(e -> {\n        log.error(\"Error occurred while processing recipe '{}': {}\", recipe.getName(), e.getMessage(), e);\n        return Mono.empty();\n    })).onErrorResume(e -> {\n        log.error(\"Error occurred: {}\", e.getMessage(), e);\n        return Flux.empty();\n    });\n}",
    "parameters": "[Flux<RecipeDto> recipes]",
    "returnType": "Flux<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a single recipe with retry logic for duplicate key errors.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The recipe data to create.'}]}', name=Optional[recipeDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createRecipe",
    "body": "{\n    return recipeDao.findByNameIgnoreCase(recipeDto.getName()).switchIfEmpty(createIngredientsAndCategories(recipeDto).flatMap(saved -> recipeDao.save(recipeDto)).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(this::isDuplicateKeyException).doBeforeRetry(retrySignal -> getWarned(recipeDto.getName(), retrySignal)))).flatMap(Mono::just).onErrorResume(MongoWriteException.class, e -> {\n        log.error(\"Duplicate key error for recipe '{}': {}\", recipeDto.getName(), e.getMessage(), e);\n        return recipeDao.findByNameIgnoreCase(recipeDto.getName());\n    });\n}",
    "parameters": "[RecipeDto recipeDto]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates or finds ingredients and categories for a recipe.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The recipe data to process.'}]}', name=Optional[recipeDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' RecipeDto'}, JavadocSnippet{text=' object with saved ingredients and categories.'}]}', name=Optional.empty}]}",
    "name": "createIngredientsAndCategories",
    "body": "{\n    return Flux.fromIterable(recipeDto.getIngredients()).concatMap(this::createOrFindIngredient).collectList().flatMap(savedIngredients -> {\n        recipeDto.setIngredients(savedIngredients);\n        return Flux.fromIterable(recipeDto.getCategories()).concatMap(this::createOrFindCategory).collectList();\n    }).flatMap(savedCategories -> {\n        recipeDto.setCategories(savedCategories);\n        return Mono.just(recipeDto);\n    });\n}",
    "parameters": "[RecipeDto recipeDto]",
    "returnType": "Mono<RecipeDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates or finds a single ingredient.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ingredient data to process.'}]}', name=Optional[ingredientDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createOrFindIngredient",
    "body": "{\n    return ingredientDao.findByNameIgnoreCase(ingredientDto.getName()).switchIfEmpty(createOrFindMeasure(ingredientDto.getMeasure()).flatMap(measureSaved -> {\n        ingredientDto.setMeasure(measureSaved);\n        return ingredientDao.save(ingredientDto).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(this::isDuplicateKeyException).doBeforeRetry(retrySignal -> getWarned(ingredientDto.getName(), retrySignal)));\n    })).flatMap(Mono::just).onErrorResume(MongoWriteException.class, e -> {\n        log.error(\"Duplicate key error for ingredient '{}': {}\", ingredientDto.getName(), e.getMessage(), e);\n        return ingredientDao.findByNameIgnoreCase(ingredientDto.getName());\n    });\n}",
    "parameters": "[IngredientDto ingredientDto]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates or finds a single measure.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The measure data to process.'}]}', name=Optional[measureDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' MeasureDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createOrFindMeasure",
    "body": "{\n    return measureDao.findByNameIgnoreCase(measureDto.getName()).switchIfEmpty(measureDao.save(measureDto).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(this::isDuplicateKeyException).doBeforeRetry(retrySignal -> getWarned(measureDto.getName(), retrySignal)))).flatMap(Mono::just).onErrorResume(MongoWriteException.class, e -> {\n        log.error(\"Duplicate key error for measure '{}': {}\", measureDto.getName(), e.getMessage(), e);\n        return measureDao.findByNameIgnoreCase(measureDto.getName());\n    });\n}",
    "parameters": "[MeasureDto measureDto]",
    "returnType": "Mono<MeasureDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates or finds a single category.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The category data to process.'}]}', name=Optional[categoryDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createOrFindCategory",
    "body": "{\n    return categoryDao.findByNameIgnoreCase(categoryDto.getName()).switchIfEmpty(categoryDao.save(categoryDto).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(this::isDuplicateKeyException).doBeforeRetry(retrySignal -> getWarned(categoryDto.getName(), retrySignal)))).flatMap(Mono::just).onErrorResume(MongoWriteException.class, e -> {\n        log.error(\"Duplicate key error for category '{}': {}\", categoryDto.getName(), e.getMessage(), e);\n        return categoryDao.findByNameIgnoreCase(categoryDto.getName());\n    });\n}",
    "parameters": "[CategoryDto categoryDto]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Checks if the given throwable is a duplicate key error.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The throwable to check.'}]}', name=Optional[throwable]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the throwable is a duplicate key error, false otherwise.'}]}', name=Optional.empty}]}",
    "name": "isDuplicateKeyException",
    "body": "{\n    return throwable instanceof MongoWriteException && ((MongoWriteException) throwable).getCode() == 11000;\n}",
    "parameters": "[Throwable throwable]",
    "returnType": "boolean"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Logs a warning message before retrying due to duplicate key error.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the recipe being retried.'}]}', name=Optional[recipeDto]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The retry signal containing failure information.'}]}', name=Optional[retrySignal]}]}",
    "name": "getWarned",
    "body": "{\n    log.warn(RETRYING_DUE_TO_DUPLICATE_KEY_ERROR, recipeDto, retrySignal.failure().getMessage());\n}",
    "parameters": "[String recipeDto, Retry.RetrySignal retrySignal]",
    "returnType": "void"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple ingredients.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The flux of ingredients to create.'}]}', name=Optional[ingredients]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createIngredients",
    "body": "{\n    return ingredients.concatMap(ingredient -> Mono.just(ingredient).// .delayElement(Duration.ofMillis(50)) // Introduce un retraso de 50 ms entre cada ingrediente si es necesario\n    flatMap(this::createIngredient).onErrorResume(e -> {\n        log.error(\"Error occurred while processing ingredient '{}': {}\", ingredient.getName(), e.getMessage(), e);\n        return Mono.empty();\n    })).onErrorResume(e -> {\n        log.error(\"Error occurred: {}\", e.getMessage(), e);\n        return Flux.empty();\n    });\n}",
    "parameters": "[Flux<IngredientDto> ingredients]",
    "returnType": "Flux<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a single ingredient with retry logic for duplicate key errors.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ingredient data to create.'}]}', name=Optional[ingredientDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createIngredient",
    "body": "{\n    return measureDao.findByNameIgnoreCase(ingredientDto.getMeasure().getName()).switchIfEmpty(Mono.defer(() -> measureDao.save(ingredientDto.getMeasure()))).flatMap(measureSaved -> {\n        ingredientDto.setMeasure(measureSaved);\n        return ingredientDao.findByNameIgnoreCase(ingredientDto.getName()).switchIfEmpty(Mono.defer(() -> ingredientDao.save(ingredientDto)).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(this::isDuplicateKeyException).doBeforeRetry(retrySignal -> getWarned(ingredientDto.getName(), retrySignal))));\n    }).flatMap(Mono::just).onErrorResume(MongoWriteException.class, e -> {\n        log.error(\"Duplicate key error for ingredient '{}': {}\", ingredientDto.getName(), e.getMessage(), e);\n        return ingredientDao.findByNameIgnoreCase(ingredientDto.getName());\n    });\n}",
    "parameters": "[IngredientDto ingredientDto]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Checks if the given throwable is a duplicate key error.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The throwable to check.'}]}', name=Optional[throwable]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the throwable is a duplicate key error, false otherwise.'}]}', name=Optional.empty}]}",
    "name": "isDuplicateKeyException",
    "body": "{\n    return throwable instanceof MongoWriteException && ((MongoWriteException) throwable).getCode() == 11000;\n}",
    "parameters": "[Throwable throwable]",
    "returnType": "boolean"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Logs a warning message before retrying due to duplicate key error.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the ingredient being retried.'}]}', name=Optional[ingredientName]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The retry signal containing failure information.'}]}', name=Optional[retrySignal]}]}",
    "name": "getWarned",
    "body": "{\n    log.warn(RETRYING_DUE_TO_DUPLICATE_KEY_ERROR, ingredientName, retrySignal.failure().getMessage());\n}",
    "parameters": "[String ingredientName, Retry.RetrySignal retrySignal]",
    "returnType": "void"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all ingredients with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllCategories",
    "body": "{\n    return ingredientDao.findAll().collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[int page, int size, String mode]",
    "returnType": "Mono<Page<IngredientDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves ingredients by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within ingredient names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getCategoriesByNameContaining",
    "body": "{\n    return ingredientDao.findByNameContainingIgnoreCase(name).collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[String name, int page, int size, String mode]",
    "returnType": "Mono<Page<IngredientDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves an ingredient by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the ingredient to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getIngredientById",
    "body": "{\n    return ingredientDao.findById(id).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Ingredient not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves ingredients by a list of IDs.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The list of IDs of the ingredients to retrieve.'}]}', name=Optional[ids]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a map containing found ingredients and not found IDs.'}]}', name=Optional.empty}]}",
    "name": "getIngredientsByIds",
    "body": "{\n    return ingredientDao.findAllById(ids).collectList().flatMap(ingredients -> {\n        List<String> foundIds = ingredients.stream().map(IngredientDto::getId).toList();\n        List<String> notFoundIds = ids.stream().filter(id -> !foundIds.contains(id)).toList();\n        Map<String, Object> result = new HashMap<>();\n        result.put(\"found\", ingredients);\n        result.put(\"notFound\", notFoundIds);\n        return Mono.just(result);\n    });\n}",
    "parameters": "[List<String> ids]",
    "returnType": "Mono<Map<String,Object>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves an ingredient by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the ingredient to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getIngredientByName",
    "body": "{\n    return ingredientDao.findByNameIgnoreCase(name).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Ingredient not found with name=\" + name)));\n}",
    "parameters": "[String name]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new ingredient.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ingredient data to create.'}]}', name=Optional[ingredientDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createIngredient",
    "body": "{\n    return createIngredientsComponent.createIngredient(ingredientDto);\n}",
    "parameters": "[IngredientDto ingredientDto]",
    "returnType": "Mono<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple ingredients.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ingredients to create.'}]}', name=Optional[ingredients]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' IngredientDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createCategories",
    "body": "{\n    return createIngredientsComponent.createIngredients(ingredients);\n}",
    "parameters": "[Flux<IngredientDto> ingredients]",
    "returnType": "Flux<IngredientDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes an ingredient by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the ingredient to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the ingredient has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteIngredient",
    "body": "{\n    return ingredientDao.findById(id).flatMap(existingIngredient -> ingredientDao.delete(existingIngredient).then(Mono.just(\"Ingredient \" + existingIngredient.getName() + \" has been deleted.\"))).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Ingredient not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all ingredients.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllCategories",
    "body": "{\n    return ingredientDao.deleteAll();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves all categories with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getAllCategories",
    "body": "{\n    return categoryDao.findAll().collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[int page, int size, String mode]",
    "returnType": "Mono<Page<CategoryDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves categories by name containing a string with pagination.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The string to search for within category names.'}]}', name=Optional[name]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The page number to retrieve.'}]}', name=Optional[page]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The number of items per page.'}]}', name=Optional[size]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The pagination mode.'}]}', name=Optional[mode]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a '}, JavadocInlineTag{tagName='link', type=LINK, content=' Page'}, JavadocSnippet{text=' of '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "getCategoriesByNameContaining",
    "body": "{\n    return categoryDao.findByNameContainingIgnoreCase(name).collectList().flatMap(list -> PaginationUtil.createPagedResult(list, page, size, mode));\n}",
    "parameters": "[String name, int page, int size, String mode]",
    "returnType": "Mono<Page<CategoryDto>>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a category by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the category to retrieve.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getCategoryById",
    "body": "{\n    return categoryDao.findById(id).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Category not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Retrieves a category by its name, case insensitive.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The name of the category to retrieve.'}]}', name=Optional[name]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "getCategoryByNameIgnoreCase",
    "body": "{\n    return categoryDao.findByNameIgnoreCase(name).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Category not found with name=\" + name)));\n}",
    "parameters": "[String name]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates a new category if it does not already exist.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The category data to create.'}]}', name=Optional[categoryDto]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' object.'}]}', name=Optional.empty}]}",
    "name": "createCategory",
    "body": "{\n    return categoryDao.findByNameIgnoreCase(categoryDto.getName()).switchIfEmpty(Mono.defer(() -> categoryDao.save(categoryDto)));\n}",
    "parameters": "[CategoryDto categoryDto]",
    "returnType": "Mono<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Creates multiple categories.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The categories to create.'}]}', name=Optional[categories]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Flux'}, JavadocSnippet{text=' emitting the created '}, JavadocInlineTag{tagName='link', type=LINK, content=' CategoryDto'}, JavadocSnippet{text=' objects.'}]}', name=Optional.empty}]}",
    "name": "createCategories",
    "body": "{\n    return categories.flatMap(this::createCategory);\n}",
    "parameters": "[Flux<CategoryDto> categories]",
    "returnType": "Flux<CategoryDto>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes a category by its ID.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='The ID of the category to delete.'}]}', name=Optional[id]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' emitting a message indicating the category has been deleted, or an error if not found.'}]}', name=Optional.empty}]}",
    "name": "deleteCategory",
    "body": "{\n    return categoryDao.findById(id).flatMap(existingCategory -> categoryDao.delete(existingCategory).then(Mono.just(\"Category \" + existingCategory.getName() + \" has been deleted.\"))).switchIfEmpty(Mono.error(new ResourceNotFoundException(\"Category not found with id=\" + id)));\n}",
    "parameters": "[String id]",
    "returnType": "Mono<String>"
  },
  {
    "javadoc": "Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Deletes all categories.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='A '}, JavadocInlineTag{tagName='link', type=LINK, content=' Mono'}, JavadocSnippet{text=' indicating completion of the deletion process.'}]}', name=Optional.empty}]}",
    "name": "deleteAllCategories",
    "body": "{\n    return categoryDao.deleteAll();\n}",
    "parameters": "[]",
    "returnType": "Mono<Void>"
  }
]