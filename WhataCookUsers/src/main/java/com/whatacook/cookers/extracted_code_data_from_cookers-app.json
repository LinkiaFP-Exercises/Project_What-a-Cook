{"com.whatacook.cookers.service":{"name":"com.whatacook.cookers.service","classes":[{"name":"UserService","methods":[{"name":"existsByEmail","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return read.checkIfExistsByEmail(userJson).map(alreadyExists -> alreadyExists ? success(\\\"User already exists\\\", true) : success(\\\"User does not exist yet\\\", false)).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"activateAccount","returnType":"Mono<ResponseEntity<String>>","parameters":"[String activationCode]","javadoc":"","body":"{\\n    return activate.byActivationCodeSentByEmail(activationCode).map(ResponseEntity::ok).onErrorResume(UserServiceException.class, uEx -> Mono.just(ResponseEntity.badRequest().body(error(uEx.getMessage(), uEx.getErrors()).toString()))).onErrorResume(Exception.class, ex -> Mono.just(ResponseEntity.badRequest().body(error(ex.getMessage()).toString())));\\n}"},{"name":"resendActivateCode","returnType":"Mono<Response>","parameters":"[String email]","javadoc":"","body":"{\\n    return activate.resendActivationCode(email).map(resended -> success(\\\"Activation mail successfully resented\\\", resended)).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"resetPasswordByCode","returnType":"Mono<ResponseEntity<String>>","parameters":"[String resetCode]","javadoc":"","body":"{\\n    return resetComponent.resetPasswordByCodeAndReturnNewPassForm(resetCode).map(ResponseEntity::ok).onErrorResume(UserServiceException.class, uEx -> Mono.just(ResponseEntity.badRequest().body(convertToJsonAsString(error(uEx.getMessage(), uEx.getErrors()))))).onErrorResume(Exception.class, ex -> Mono.just(ResponseEntity.badRequest().body(convertToJsonAsString(error(ex.getMessage())))));\\n}"},{"name":"setNewPasswordByCode","returnType":"Mono<ResponseEntity<String>>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return resetComponent.setNewPasswordByCode(userJson).map(ResponseEntity::ok).onErrorResume(UserServiceException.class, uEx -> Mono.just(ResponseEntity.badRequest().body(convertToJsonAsString(error(uEx.getMessage(), uEx.getErrors()))))).onErrorResume(Exception.class, ex -> Mono.just(ResponseEntity.badRequest().body(convertToJsonAsString(error(ex.getMessage())))));\\n}"},{"name":"readOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return read.findUserByEmail(userJson).map(found -> success(\\\"User successfully read\\\", found)).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"updateOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return update.updateUser(userJson).map(updated -> success(\\\"User successfully UPDATED\\\", updated)).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"deleteOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return delete.proceedIfApplicable(userJson).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"findByUsername","returnType":"Mono<UserDetails>","parameters":"[String userEmailOrId]","javadoc":"","body":"{\\n    try {\\n        return login.validSpringUserToLogin(userEmailOrId);\\n    } catch (Exception e) {\\n        throw new UsernameNotFoundException(userEmailOrId);\\n    }\\n}"}]},{"name":"AuthService","methods":[{"name":"registerNewUser","returnType":"Mono<Response>","parameters":"[UserJustToSave userJson]","javadoc":"","body":"{\\n    return create.saveUser(userJson).map(saved -> success(\\\"User successfully created\\\", saved)).onErrorResume(UserServiceException.class, Response::monoError).onErrorResume(Exception.class, Response::monoError);\\n}"},{"name":"authenticationByLogin","returnType":"Mono<ResponseEntity<Response>>","parameters":"[@Valid AuthRequestDto authRequestDto]","javadoc":"","body":"{\\n    Authentication authentication = new UsernamePasswordAuthenticationToken(authRequestDto.getUsername(), authRequestDto.getPassword());\\n    return reactiveAuthenticationManager.authenticate(authentication).flatMap(auth -> Mono.just(ResponseEntity.ok(success(\\\"TOKEN\\\", jwtUtil.generateToken(authRequestDto))))).onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error(\\\"Authentication failed: \\\" + e.getMessage()))));\\n}"},{"name":"sendEmailCodeToResetPassword","returnType":"Mono<ResponseEntity<Response>>","parameters":"[@Valid UserJson userJson]","javadoc":"","body":"{\\n    return DAO.findByEmail(userJson.getEmail()).flatMap(userDTO -> {\\n        if (userDTO.getBirthdate().equals(userJson.getBirthdate())) {\\n            return emailService.createResetCodeAndSendEmail(userDTO).map(user -> ResponseEntity.ok(success(\\\"Email sent with reset code\\\", user)));\\n        } else {\\n            return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error(\\\"Incorrect information\\\")));\\n        }\\n    }).switchIfEmpty(Mono.just(ResponseEntity.ok(error(\\\"Unregistered email\\\"))));\\n}"}]},{"name":"ResetService","methods":[{"name":"createNew","returnType":"Mono<ResetDto>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return DAO.save(ResetDto.to(userDTO));\\n}"},{"name":"findById","returnType":"Mono<ResetDto>","parameters":"[String id]","javadoc":"","body":"{\\n    return DAO.findById(id);\\n}"},{"name":"findByCode","returnType":"Mono<ResetDto>","parameters":"[String code]","javadoc":"","body":"{\\n    return DAO.findByCode(code);\\n}"},{"name":"deleteById","returnType":"Mono<Void>","parameters":"[String id]","javadoc":"","body":"{\\n    return DAO.deleteById(id);\\n}"}]},{"name":"FavoriteService","methods":[{"name":"getFavorites","returnType":"Mono<Response>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return favoriteDao.findById(favoriteRequest.getUserId()).switchIfEmpty(createEmptyFavorite(favoriteRequest)).transform(this::ensureNonNullLists).map(favorites -> success(USER_FAVORITES_RETRIEVED, favorites)).onErrorResume(e -> handleError(\\\"getFavorites\\\", e));\\n}"},{"name":"addFavoriteRecipe","returnType":"Mono<Response>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return favoriteDao.findById(favoriteRequest.getUserId()).switchIfEmpty(createEmptyFavorite(favoriteRequest)).transform(this::ensureNonNullLists).flatMap(favorites -> favorites.addRecipe(favoriteRequest.getRecipeId())).flatMap(favoriteDao::save).map(saved -> success(RECIPE_SUCCESSFULLY_ADDED_TO_FAVORITES, saved)).onErrorResume(e -> handleError(\\\"addFavoriteRecipe\\\", e));\\n}"},{"name":"addFavoriteIngredient","returnType":"Mono<Response>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return favoriteDao.findById(favoriteRequest.getUserId()).switchIfEmpty(createEmptyFavorite(favoriteRequest)).transform(this::ensureNonNullLists).flatMap(favorites -> favorites.addIngredient(favoriteRequest.getIngredientId())).flatMap(favoriteDao::save).map(saved -> success(INGREDIENT_SUCCESSFULLY_ADDED_TO_FAVORITES, saved)).onErrorResume(e -> handleError(\\\"addFavoriteIngredient\\\", e));\\n}"},{"name":"removeFavoriteRecipe","returnType":"Mono<Response>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return favoriteDao.findById(favoriteRequest.getUserId()).switchIfEmpty(createEmptyFavorite(favoriteRequest)).transform(this::ensureNonNullLists).flatMap(favorites -> favorites.removeRecipe(favoriteRequest.getRecipeId())).flatMap(favoriteDao::save).map(saved -> success(RECIPE_SUCCESSFULLY_REMOVED_FROM_FAVORITES, saved)).onErrorResume(e -> handleError(\\\"removeFavoriteRecipe\\\", e));\\n}"},{"name":"removeFavoriteIngredient","returnType":"Mono<Response>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return favoriteDao.findById(favoriteRequest.getUserId()).switchIfEmpty(createEmptyFavorite(favoriteRequest)).transform(this::ensureNonNullLists).flatMap(favorites -> favorites.removeIngredient(favoriteRequest.getIngredientId())).flatMap(favoriteDao::save).map(saved -> success(INGREDIENT_SUCCESSFULLY_REMOVED_FROM_FAVORITES, saved)).onErrorResume(e -> handleError(\\\"removeFavoriteIngredient\\\", e));\\n}"},{"name":"createEmptyFavorite","returnType":"Mono<FavoriteDto>","parameters":"[FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return Mono.defer(() -> Mono.just(new FavoriteDto(favoriteRequest.getUserId(), new ArrayList<>(), new ArrayList<>())));\\n}"},{"name":"ensureNonNullLists","returnType":"Mono<FavoriteDto>","parameters":"[Mono<FavoriteDto> favoriteDtoMono]","javadoc":"","body":"{\\n    return favoriteDtoMono.map(favorites -> {\\n        favorites.setRecipes(Optional.ofNullable(favorites.getRecipes()).orElseGet(ArrayList::new));\\n        favorites.setIngredients(Optional.ofNullable(favorites.getIngredients()).orElseGet(ArrayList::new));\\n        return favorites;\\n    });\\n}"},{"name":"handleError","returnType":"Mono<Response>","parameters":"[String methodName, Throwable e]","javadoc":"","body":"{\\n    log.error(\\\"Error in {}: {}\\\", methodName, e.getMessage(), e);\\n    return Response.monoError(e);\\n}"}]},{"name":"ActivationService","methods":[{"name":"createNew","returnType":"Mono<ActivationDto>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return DAO.save(ActivationDto.to(userDTO));\\n}"},{"name":"findById","returnType":"Mono<ActivationDto>","parameters":"[String id]","javadoc":"","body":"{\\n    return DAO.findById(id);\\n}"},{"name":"findByCode","returnType":"Mono<ActivationDto>","parameters":"[String code]","javadoc":"","body":"{\\n    return DAO.findByCode(code).doOnNext(dto -> log.info(\\\"ActivationDto encontrado: {}\\\", dto)).doOnError(e -> log.error(\\\"Error al buscar ActivationDto\\\", e));\\n}"},{"name":"deleteById","returnType":"Mono<Void>","parameters":"[String id]","javadoc":"","body":"{\\n    return DAO.deleteById(id);\\n}"}]},{"name":"EmailService","methods":[{"name":"createActivationCodeAndSendEmail","returnType":"Mono<UserJson>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return activationService.createNew(userDTO).flatMap(activation -> sendActivationMail(activation, userDTO));\\n}"},{"name":"sendActivationMail","returnType":"Mono<UserJson>","parameters":"[ActivationDto activationDto, UserDto userDTO]","javadoc":"","body":"{\\n    return Mono.fromCallable(() -> buildMimeMessage(activationDto, userDTO)).flatMap(this::sendEmail).retry(2).thenReturn(userDTO.toJsonWithoutId()).doOnError(UserServiceException::doOnErrorMap);\\n}"},{"name":"buildMimeMessage","returnType":"MimeMessage","parameters":"[ActivationDto activationDto, UserDto userDTO]","javadoc":"","body":"{\\n    MimeMessage message = emailSender.createMimeMessage();\\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \\\"UTF-8\\\");\\n    helper.setFrom(springMailConfig.getSpringMailUser());\\n    helper.setTo(userDTO.getEmail());\\n    helper.setSubject(\\\"WhataCook : Activación de cuenta\\\");\\n    String content = buildHtmlContentToActivateAccount(activationDto, userDTO);\\n    helper.setText(content, true);\\n    return message;\\n}"},{"name":"buildHtmlContentToActivateAccount","returnType":"String","parameters":"[ActivationDto activationDto, UserDto userDTO]","javadoc":"","body":"{\\n    String activationLink = globalValues.getUrlActivationAccount() + activationDto.getCode();\\n    return Htmls.ActivationEmail.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"USER_NAME\\\", userDTO.getFirstName()).replace(\\\"ACTIVATION_LINK\\\", activationLink);\\n}"},{"name":"sendEmail","returnType":"Mono<Void>","parameters":"[MimeMessage message]","javadoc":"","body":"{\\n    return Mono.fromRunnable(() -> emailSender.send(message));\\n}"},{"name":"createResetCodeAndSendEmail","returnType":"Mono<UserJson>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return resetService.createNew(userDTO).flatMap(resetCode -> sendResetMail(resetCode, userDTO));\\n}"},{"name":"sendResetMail","returnType":"Mono<UserJson>","parameters":"[ResetDto resetCode, UserDto userDTO]","javadoc":"","body":"{\\n    return Mono.fromCallable(() -> buildMimeMessage(resetCode, userDTO)).flatMap(this::sendEmail).retry(2).thenReturn(userDTO.toJsonWithoutId()).doOnError(UserServiceException::doOnErrorMap);\\n}"},{"name":"buildMimeMessage","returnType":"MimeMessage","parameters":"[ResetDto resetCode, UserDto userDTO]","javadoc":"","body":"{\\n    MimeMessage message = emailSender.createMimeMessage();\\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \\\"UTF-8\\\");\\n    helper.setFrom(springMailConfig.getSpringMailUser());\\n    helper.setTo(userDTO.getEmail());\\n    helper.setSubject(\\\"WhataCook : reset contraseña\\\");\\n    String content = buildHtmlContentToResetAccount(resetCode, userDTO);\\n    helper.setText(content, true);\\n    return message;\\n}"},{"name":"buildHtmlContentToResetAccount","returnType":"String","parameters":"[ResetDto resetCode, UserDto userDTO]","javadoc":"","body":"{\\n    String activationLink = globalValues.getUrlResetPassword() + resetCode.getCode();\\n    return Htmls.ResetPasswordMail.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"USER_NAME\\\", userDTO.getFirstName()).replace(\\\"ACTIVATION_LINK\\\", activationLink);\\n}"}]}]},"com.whatacook.cookers.model.favorites":{"name":"com.whatacook.cookers.model.favorites","classes":[{"name":"FavoriteDto","methods":[{"name":"addRecipe","returnType":"Mono<FavoriteDto>","parameters":"[String recipeId]","javadoc":"","body":"{\\n    return Mono.just(recipeId).filterWhen(this::notContainsRecipe).doOnNext(recipes::add).thenReturn(this);\\n}"},{"name":"removeRecipe","returnType":"Mono<FavoriteDto>","parameters":"[String recipeId]","javadoc":"","body":"{\\n    return Mono.just(recipeId).doOnNext(recipes::remove).thenReturn(this);\\n}"},{"name":"containsRecipe","returnType":"Mono<Boolean>","parameters":"[String recipeId]","javadoc":"","body":"{\\n    return Mono.just(recipes.contains(recipeId));\\n}"},{"name":"notContainsRecipe","returnType":"Mono<Boolean>","parameters":"[String recipeId]","javadoc":"","body":"{\\n    return containsRecipe(recipeId).map(exists -> !exists);\\n}"},{"name":"addIngredient","returnType":"Mono<FavoriteDto>","parameters":"[String ingredientId]","javadoc":"","body":"{\\n    return Mono.just(ingredientId).filterWhen(this::notContainsFavoriteIngredient).doOnNext(ingredients::add).thenReturn(this);\\n}"},{"name":"removeIngredient","returnType":"Mono<FavoriteDto>","parameters":"[String ingredientId]","javadoc":"","body":"{\\n    return Mono.just(ingredientId).doOnNext(ingredients::remove).thenReturn(this);\\n}"},{"name":"containsFavoriteIngredient","returnType":"Mono<Boolean>","parameters":"[String ingredientId]","javadoc":"","body":"{\\n    return Mono.just(ingredients.contains(ingredientId));\\n}"},{"name":"notContainsFavoriteIngredient","returnType":"Mono<Boolean>","parameters":"[String ingredientId]","javadoc":"","body":"{\\n    return containsFavoriteIngredient(ingredientId).map(exists -> !exists);\\n}"}]},{"name":"FavoriteRequest","methods":[{"name":"get_id","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    return userId;\\n}"}]}]},"com.whatacook.cookers.config.jwt":{"name":"com.whatacook.cookers.config.jwt","classes":[{"name":"JwtUtil","methods":[{"name":"getSecretKey","returnType":"SecretKey","parameters":"[]","javadoc":"","body":"{\\n    return Keys.hmacShaKeyFor(this.secret.getBytes());\\n}"},{"name":"getUsernameFromToken","returnType":"String","parameters":"[String token]","javadoc":"","body":"{\\n    return getClaimFromToken(token, Claims::getSubject);\\n}"},{"name":"getExpirationDateFromToken","returnType":"Date","parameters":"[String token]","javadoc":"","body":"{\\n    return getClaimFromToken(token, Claims::getExpiration);\\n}"},{"name":"getClaimFromToken","returnType":"T","parameters":"[String token, Function<Claims, T> claimsResolver]","javadoc":"","body":"{\\n    final Claims claims = getAllClaimsFromToken(token);\\n    return claimsResolver.apply(claims);\\n}"},{"name":"getAllClaimsFromToken","returnType":"Claims","parameters":"[String token]","javadoc":"","body":"{\\n    return Jwts.parser().verifyWith(getSecretKey()).build().parseSignedClaims(token.replace(prefix, \\\"\\\")).getPayload();\\n}"},{"name":"isExpired","returnType":"Boolean","parameters":"[String token]","javadoc":"","body":"{\\n    final Date expiration = getExpirationDateFromToken(token);\\n    return expiration.before(new Date());\\n}"},{"name":"generateToken","returnType":"String","parameters":"[AuthRequestDto authRequestDto]","javadoc":"","body":"{\\n    Map<String, Object> claims = new HashMap<>();\\n    return doGenerateToken(claims, authRequestDto.getUsername());\\n}"},{"name":"doGenerateToken","returnType":"String","parameters":"[Map<String, Object> claims, String subject]","javadoc":"","body":"{\\n    return Jwts.builder().claims(claims).subject(subject).audience().add(audience).and().issuer(issuer).issuedAt(new Date(System.currentTimeMillis())).expiration(new Date(System.currentTimeMillis() + expiration)).signWith(getSecretKey()).compact();\\n}"},{"name":"generateExpiredTokenForTest","returnType":"String","parameters":"[Map<String, Object> claims, String subject]","javadoc":"","body":"{\\n    long nowMillis = System.currentTimeMillis();\\n    Date now = new Date(nowMillis - expiration * 2);\\n    Date expiredDate = new Date(nowMillis - expiration);\\n    return Jwts.builder().claims(claims).subject(subject).audience().add(audience).and().issuer(issuer).issuedAt(now).expiration(expiredDate).signWith(getSecretKey()).compact();\\n}"},{"name":"hasToken","returnType":"boolean","parameters":"[String token]","javadoc":"","body":"{\\n    return StringUtils.hasText(token);\\n}"},{"name":"extractPrefix","returnType":"String","parameters":"[String token]","javadoc":"","body":"{\\n    return token.substring(7);\\n}"},{"name":"isValidToken","returnType":"Boolean","parameters":"[String token]","javadoc":"","body":"{\\n    if (!token.startsWith(prefix))\\n        throw new JwtException(\\\"This Token is not Bearer\\\");\\n    else if (token.split(\\\"\\\\\\\\.\\\").length != 3)\\n        throw new JwtException(\\\"This Token is not ours\\\");\\n    else if (isExpired(token))\\n        throw new JwtException(\\\"This Token has Expired\\\");\\n    else\\n        return true;\\n}"}]},{"name":"AuthorizationUtil","methods":[{"name":"executeIfAuthorized","returnType":"Mono<Response>","parameters":"[UserJson userJson, BiFunction<UserJson, UserDetails, Mono<Response>> action]","javadoc":"","body":"{\\n    return getAuthentication().flatMap(authentication -> isAuthorized(userJson, authentication).flatMap(isAuthorized -> isAuthorized ? action.apply(userJson, (UserDetails) authentication.getPrincipal()) : UserServiceException.mono(\\\"No tienes permiso para acceder a esta información.\\\")));\\n}"},{"name":"getAuthentication","returnType":"Mono<Authentication>","parameters":"[]","javadoc":"","body":"{\\n    return ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication);\\n}"},{"name":"isAuthorized","returnType":"Mono<Boolean>","parameters":"[UserJson userJson, Authentication authentication]","javadoc":"","body":"{\\n    return Mono.just(isAdmin(authentication) || isOwnUser(userJson, getUserDetails(authentication)));\\n}"},{"name":"isAdmin","returnType":"boolean","parameters":"[Authentication authentication]","javadoc":"","body":"{\\n    return authentication.getAuthorities().stream().anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\\\"ROLE_ADMIN\\\"));\\n}"},{"name":"isOwnUser","returnType":"boolean","parameters":"[UserJson userJson, UserDetails userDetails]","javadoc":"","body":"{\\n    String username = userDetails.getUsername();\\n    return (userJson.get_id() == null) ? username.contains(userJson.getEmail()) : username.contains(userJson.get_id());\\n}"},{"name":"getUserDetails","returnType":"UserDetails","parameters":"[Authentication authentication]","javadoc":"","body":"{\\n    return (UserDetails) authentication.getPrincipal();\\n}"}]},{"name":"CustomUserDetails","methods":[]},{"name":"CustomSecurity","methods":[{"name":"isSelfOrAdmin","returnType":"boolean","parameters":"[Authentication authentication, String userId, String email]","javadoc":"","body":"{\\n    CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();\\n    return (userDetails.getId().equals(userId)) || (userDetails.getEmail().equals(email)) || authentication.getAuthorities().stream().anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\\\"ROLE_ADMIN\\\"));\\n}"}]}]},"com.whatacook.cookers.model.responses":{"name":"com.whatacook.cookers.model.responses","classes":[{"name":"Response","methods":[{"name":"error","returnType":"Response","parameters":"[String message]","javadoc":"","body":"{\\n    Response response = new Response();\\n    response.put(SUCCESS, false);\\n    response.put(MESSAGE, setMessage(message));\\n    return response;\\n}"},{"name":"monoError","returnType":"Mono<Response>","parameters":"[String message]","javadoc":"","body":"{\\n    return Mono.just(error(message));\\n}"},{"name":"monoError","returnType":"Mono<Response>","parameters":"[Exception e]","javadoc":"","body":"{\\n    return monoError(e.getMessage());\\n}"},{"name":"monoError","returnType":"Mono<Response>","parameters":"[Throwable e]","javadoc":"","body":"{\\n    return monoError(e.getMessage());\\n}"},{"name":"error","returnType":"Response","parameters":"[String message, @Nullable Object content]","javadoc":"","body":"{\\n    Response response = error(message);\\n    if (content != null)\\n        response.put(CONTENT, content);\\n    return response;\\n}"},{"name":"monoError","returnType":"Mono<Response>","parameters":"[String message, @Nullable Object content]","javadoc":"","body":"{\\n    return Mono.just(error(message, content));\\n}"},{"name":"monoError","returnType":"Mono<Response>","parameters":"[UserServiceException e]","javadoc":"","body":"{\\n    return monoError(e.getMessage(), e.getErrors());\\n}"},{"name":"success","returnType":"Response","parameters":"[String message, @Nullable Object content]","javadoc":"","body":"{\\n    Response response = new Response();\\n    response.put(SUCCESS, true);\\n    response.put(MESSAGE, setMessage(message));\\n    if (content != null)\\n        response.put(CONTENT, content);\\n    return response;\\n}"},{"name":"setMessage","returnType":"String","parameters":"[String message]","javadoc":"","body":"{\\n    return (notNullOrEmpty(message)) ? message : MESSAGE_ERROR;\\n}"},{"name":"getMessage","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    return (get(MESSAGE) == null) ? MESSAGE_ERROR : (String) get(MESSAGE);\\n}"},{"name":"isSuccess","returnType":"boolean","parameters":"[]","javadoc":"","body":"{\\n    return (boolean) get(SUCCESS);\\n}"},{"name":"getContent","returnType":"Object","parameters":"[]","javadoc":"","body":"{\\n    return map.containsKey(CONTENT) ? map.get(CONTENT) : map.remove(CONTENT);\\n}"},{"name":"addMessage","returnType":"void","parameters":"[String message]","javadoc":"","body":"{\\n    if (notNullOrEmpty(message))\\n        this.put(MESSAGE, this.get(MESSAGE) + message);\\n}"},{"name":"toString","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    return this.map.toString();\\n}"},{"name":"put","returnType":"void","parameters":"[String key, Object value]","javadoc":"","body":"{\\n    map.put(key, value);\\n}"},{"name":"get","returnType":"Object","parameters":"[String key]","javadoc":"","body":"{\\n    return map.get(key);\\n}"}]}]},"com.whatacook.cookers.controller":{"name":"com.whatacook.cookers.controller","classes":[{"name":"JavaDocController","methods":[{"name":"getJavadoc","returnType":"ResponseEntity<byte[]>","parameters":"[]","javadoc":"","body":"{\\n    try {\\n        Resource resource = new FileSystemResource(\\\"/app/javadoc/index.html\\\");\\n        if (!resource.exists()) {\\n            log.error(\\\"Javadoc file not found at /app/javadoc/index.html\\\");\\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\\n        }\\n        byte[] content = Files.readAllBytes(resource.getFile().toPath());\\n        HttpHeaders headers = new HttpHeaders();\\n        headers.add(\\\"Content-Type\\\", \\\"text/html\\\");\\n        return new ResponseEntity<>(content, headers, HttpStatus.OK);\\n    } catch (IOException e) {\\n        log.error(\\\"Error reading Javadoc file: \\\", e);\\n        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\\n    }\\n}"}]},{"name":"JwtAuthenticationController","methods":[{"name":"register","returnType":"Mono<Response>","parameters":"[@Valid @RequestBody UserJustToSave userJson]","javadoc":"","body":"{\\n    return auth.registerNewUser(userJson);\\n}"},{"name":"createAuthenticationTokenByLogin","returnType":"Mono<ResponseEntity<Response>>","parameters":"[@RequestBody AuthRequestDto AuthRequestDto]","javadoc":"","body":"{\\n    return auth.authenticationByLogin(AuthRequestDto);\\n}"},{"name":"forgotPassword","returnType":"Mono<ResponseEntity<Response>>","parameters":"[@RequestBody UserJson userJson]","javadoc":"","body":"{\\n    return auth.sendEmailCodeToResetPassword(userJson);\\n}"}]},{"name":"FavoriteController","methods":[{"name":"getFavorites","returnType":"Mono<Response>","parameters":"[@RequestBody @Nonnull FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(favoriteRequest, (json, userDetails) -> favoriteService.getFavorites(favoriteRequest));\\n}"},{"name":"addFavoriteRecipe","returnType":"Mono<Response>","parameters":"[@RequestBody @Nonnull FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(favoriteRequest, (json, userDetails) -> favoriteService.addFavoriteRecipe(favoriteRequest));\\n}"},{"name":"addFavoriteIngredient","returnType":"Mono<Response>","parameters":"[@RequestBody @Nonnull FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(favoriteRequest, (json, userDetails) -> favoriteService.addFavoriteIngredient(favoriteRequest));\\n}"},{"name":"removeFavoriteRecipe","returnType":"Mono<Response>","parameters":"[@RequestBody @Nonnull FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(favoriteRequest, (json, userDetails) -> favoriteService.removeFavoriteRecipe(favoriteRequest));\\n}"},{"name":"removeFavoriteIngredient","returnType":"Mono<Response>","parameters":"[@RequestBody @Nonnull FavoriteRequest favoriteRequest]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(favoriteRequest, (json, userDetails) -> favoriteService.removeFavoriteIngredient(favoriteRequest));\\n}"}]},{"name":"GlobalExceptionHandler","methods":[{"name":"handleValidationExceptions","returnType":"Response","parameters":"[MethodArgumentNotValidException ex]","javadoc":"","body":"{\\n    Map<String, String> errorMsg = ex.getBindingResult().getFieldErrors().stream().collect(Collectors.groupingBy(FieldError::getField, Collectors.mapping(FieldError::getDefaultMessage, Collectors.joining(\\\"; \\\"))));\\n    return createErrorResponse(HttpStatus.BAD_REQUEST, \\\"Invalid or incorrect format!!!\\\", errorMsg);\\n}"},{"name":"handleValidationExceptions","returnType":"Response","parameters":"[WebExchangeBindException ex]","javadoc":"","body":"{\\n    @SuppressWarnings(\\\"DataFlowIssue\\\")\\n    Map<String, String> errors = ex.getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage, (existing, replacement) -> existing));\\n    return createErrorResponse(HttpStatus.BAD_REQUEST, \\\"Invalid or incorrect format!!!\\\", errors);\\n}"},{"name":"handleConstraintViolationException","returnType":"Response","parameters":"[ConstraintViolationException ex]","javadoc":"","body":"{\\n    var errors = ex.getConstraintViolations().stream().collect(Collectors.toMap(violation -> {\\n        String path = violation.getPropertyPath().toString();\\n        return path.substring(path.lastIndexOf('.') + 1);\\n    }, ConstraintViolation::getMessage, (existingValue, newValue) -> existingValue));\\n    return createErrorResponse(HttpStatus.BAD_REQUEST, \\\"Validation error\\\", errors);\\n}"},{"name":"handleValidationExceptions","returnType":"Response","parameters":"[DecodingException ex]","javadoc":"","body":"{\\n    String errorMessage = \\\"Invalid request body or not present: A valid request body is required.\\\";\\n    return createErrorResponse(HttpStatus.BAD_REQUEST, errorMessage, ex);\\n}"},{"name":"handleInvalidRequest","returnType":"Response","parameters":"[Exception ex]","javadoc":"","body":"{\\n    return createErrorResponse(HttpStatus.BAD_REQUEST, \\\"Invalid or incorrect requisition!!!\\\", ex);\\n}"},{"name":"handleCantFoundWhatYouWant","returnType":"Response","parameters":"[Exception ex]","javadoc":"","body":"{\\n    return createErrorResponse(HttpStatus.INTERNAL_SERVER_ERROR, \\\"Couldn't find what you want\\\", ex);\\n}"},{"name":"handleRequestNotFound","returnType":"Response","parameters":"[Exception ex]","javadoc":"","body":"{\\n    return createErrorResponse(HttpStatus.NOT_FOUND, \\\"SORRY BABY, the fault is ours!!!\\\", ex);\\n}"},{"name":"handleJwtException","returnType":"Response","parameters":"[Exception ex]","javadoc":"","body":"{\\n    return createErrorResponse(HttpStatus.UNAUTHORIZED, \\\"Please, Log in again!!!\\\", ex);\\n}"},{"name":"createErrorResponse","returnType":"Response","parameters":"[HttpStatus status, String customMessage, Exception ex]","javadoc":"","body":"{\\n    return Response.error(httpMessageError(status, customMessage), Map.of(\\\"ERROR\\\", ex.getMessage().split(\\\":\\\")[0]));\\n}"},{"name":"createErrorResponse","returnType":"Response","parameters":"[HttpStatus status, String customMessage, Map map]","javadoc":"","body":"{\\n    return Response.error(httpMessageError(status, customMessage), map);\\n}"},{"name":"httpMessageError","returnType":"String","parameters":"[HttpStatus status, String msg]","javadoc":"","body":"{\\n    return String.format(\\\"[%s - %d] 8==> %s\\\", status.getReasonPhrase().toUpperCase(), status.value(), msg);\\n}"}]},{"name":"UserController","methods":[{"name":"existsByEmail","returnType":"Mono<Response>","parameters":"[@Valid @RequestBody UserJson userJson]","javadoc":"","body":"{\\n    return service.existsByEmail(userJson);\\n}"},{"name":"readOne","returnType":"Mono<Response>","parameters":"[@Valid @RequestBody UserJson userJson]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(userJson, (json, userDetails) -> service.readOne(json));\\n}"},{"name":"update","returnType":"Mono<Response>","parameters":"[@RequestBody UserJson userJson]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(userJson, (json, userDetails) -> service.updateOne(json));\\n}"},{"name":"deleteOne","returnType":"Mono<Response>","parameters":"[@RequestParam(\"id\") String id]","javadoc":"","body":"{\\n    return AuthorizationUtil.executeIfAuthorized(new UserJson(id), (json, userDetails) -> service.deleteOne(json));\\n}"},{"name":"activate","returnType":"Mono<ResponseEntity<String>>","parameters":"[@RequestParam(\"activationCode\") String activationCode]","javadoc":"","body":"{\\n    return service.activateAccount(activationCode);\\n}"},{"name":"resendActivation","returnType":"Mono<Response>","parameters":"[@ValidEmail @RequestParam(\"emailToResend\") String emailToResend]","javadoc":"","body":"{\\n    return service.resendActivateCode(emailToResend);\\n}"},{"name":"resetPassword","returnType":"Mono<ResponseEntity<String>>","parameters":"[@RequestParam(\"resetCode\") String resetCode]","javadoc":"","body":"{\\n    return service.resetPasswordByCode(resetCode);\\n}"},{"name":"setNewPassword","returnType":"Mono<ResponseEntity<String>>","parameters":"[@RequestBody UserJson userJson]","javadoc":"","body":"{\\n    return service.setNewPasswordByCode(userJson);\\n}"}]}]},"com.whatacook.cookers.model.users":{"name":"com.whatacook.cookers.model.users","classes":[{"name":"UserJustToSave","methods":[{"name":"toUserDTO","returnType":"UserDto","parameters":"[]","javadoc":"","body":"{\\n    UserDto userDTO = new UserDto();\\n    userDTO.setEmail(email);\\n    userDTO.setPassword(encryptPassword(password));\\n    userDTO.setFirstName(firstName);\\n    userDTO.setSurNames(surNames);\\n    userDTO.setBirthdate(birthdate);\\n    return userDTO;\\n}"}]},{"name":"UserJson","methods":[{"name":"from","returnType":"UserJson","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return new UserJson(userDTO);\\n}"}]},{"name":"UserDto","methods":[{"name":"toJson","returnType":"UserJson","parameters":"[]","javadoc":"","body":"{\\n    return UserJson.from(this);\\n}"},{"name":"toJsonWithoutId","returnType":"UserJson","parameters":"[]","javadoc":"","body":"{\\n    this.set_id(null);\\n    return UserJson.from(this);\\n}"}]}]},"com.whatacook.cookers.config.filter":{"name":"com.whatacook.cookers.config.filter","classes":[{"name":"TokenAuthenticationFlowHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String requestToken, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"AuthenticationManager","methods":[{"name":"setAuthenticated","returnType":"Mono<Void>","parameters":"[String userEmailOrId, String token, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"EmailResendFlowHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String emailToResend, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"EmailResetPasswordFlowHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String resetCode, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"SetNewPasswordFlowHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String codeToSet, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"ActivationCodeFlowHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String activationCode, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"ResponseErrorHtml","methods":[{"name":"send","returnType":"Mono<Void>","parameters":"[ServerWebExchange exchange, String htmlContent]","javadoc":"","body":""}]},{"name":"AnyRequestFilter","methods":[{"name":"createHandler","returnType":"RequestHandler","parameters":"[TriFunction<String, ServerWebExchange, WebFilterChain, Mono<Void>> handlerFunction, String jwtKey]","javadoc":"","body":"{\\n    return (exchange, chain) -> {\\n        String paramValue = getHeaderOrParamValue(exchange, jwtKey);\\n        return handlerFunction.apply(paramValue, exchange, chain);\\n    };\\n}"},{"name":"filter","returnType":"Mono<Void>","parameters":"[@NotNull ServerWebExchange exchange, @NotNull WebFilterChain chain]","javadoc":"","body":"{\\n    return handlers.entrySet().stream().filter(entry -> requestContainsKey(exchange, entry.getKey())).findFirst().map(entry -> entry.getValue().handle(exchange, chain)).orElseGet(() -> chain.filter(exchange));\\n}"},{"name":"requestContainsKey","returnType":"boolean","parameters":"[ServerWebExchange exchange, String key]","javadoc":"","body":"{\\n    return exchange.getRequest().getHeaders().containsKey(key) || exchange.getRequest().getQueryParams().containsKey(key);\\n}"},{"name":"getHeaderOrParamValue","returnType":"String","parameters":"[ServerWebExchange exchange, String key]","javadoc":"","body":"{\\n    return Optional.ofNullable(exchange.getRequest().getHeaders().getFirst(key)).orElse(exchange.getRequest().getQueryParams().getFirst(key));\\n}"}]},{"name":"RequestHandler","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":""}]},{"name":"TriFunction","methods":[{"name":"apply","returnType":"R","parameters":"[T t, U u, V v]","javadoc":"","body":""}]}]},"com.whatacook.cookers.utilities":{"name":"com.whatacook.cookers.utilities","classes":[{"name":"Util","methods":[{"name":"isValidBirthdate","returnType":"boolean","parameters":"[LocalDate birthdate]","javadoc":"","body":"{\\n    return birthdate != null && !birthdate.isAfter(LocalDate.now().minusYears(7));\\n}"},{"name":"notValidBirthdate","returnType":"boolean","parameters":"[LocalDate birthdate]","javadoc":"","body":"{\\n    return birthdate == null || birthdate.isAfter(LocalDate.now().minusYears(7));\\n}"},{"name":"isNullOrEmpty","returnType":"boolean","parameters":"[String something]","javadoc":"","body":"{\\n    return !StringUtils.hasText(something);\\n}"},{"name":"isNullOrEmptyOrLiteralNull","returnType":"boolean","parameters":"[String something]","javadoc":"","body":"{\\n    return isNullOrEmpty(something) || \\\"null\\\".equalsIgnoreCase(something.trim());\\n}"},{"name":"notNullOrEmpty","returnType":"boolean","parameters":"[String something]","javadoc":"","body":"{\\n    return StringUtils.hasText(something) && !\\\"null\\\".equalsIgnoreCase(something.trim());\\n}"},{"name":"TitleCase","returnType":"String","parameters":"[String toConvert]","javadoc":"","body":"{\\n    return isNullOrEmptyOrLiteralNull(toConvert) ? null : TitleCase.all(toConvert);\\n}"},{"name":"encryptPassword","returnType":"String","parameters":"[String toEncrypt]","javadoc":"","body":"{\\n    return BCrypt.encode(toEncrypt);\\n}"},{"name":"encryptMatches","returnType":"boolean","parameters":"[String rawPassword, String encodedPassword]","javadoc":"","body":"{\\n    return notNullOrEmpty(rawPassword) && BCrypt.matches(rawPassword, encodedPassword);\\n}"},{"name":"encryptNotMatches","returnType":"boolean","parameters":"[String rawPassword, String encodedPassword]","javadoc":"","body":"{\\n    return !encryptMatches(rawPassword, encodedPassword);\\n}"},{"name":"isValidEmail","returnType":"boolean","parameters":"[String email]","javadoc":"","body":"{\\n    return notNullOrEmpty(email) && email.matches(buildEmailRegex());\\n}"},{"name":"notValidEmail","returnType":"boolean","parameters":"[String email]","javadoc":"","body":"{\\n    return isNullOrEmpty(email) || !email.matches(buildEmailRegex());\\n}"},{"name":"buildEmailRegex","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    String front = \\\"[\\\\\\\\p{L}\\\\\\\\p{N}!#$%&'*+/=?^_`{|}~-]+\\\";\\n    String back = \\\"[\\\\\\\\p{L}\\\\\\\\p{N}](?:[a-z0-9-]*[\\\\\\\\p{L}\\\\\\\\p{N}]\\\";\\n    String domain = String.format(\\\"(?:%s)?.)+%s)?\\\", back, back);\\n    return String.format(\\\"%s(?:.%s)*@%s\\\", front, front, domain);\\n}"},{"name":"isValidPassword","returnType":"boolean","parameters":"[String password]","javadoc":"","body":"{\\n    return notNullOrEmpty(password) && password.matches(buildPassRegex());\\n}"},{"name":"notValidPassword","returnType":"boolean","parameters":"[String password]","javadoc":"","body":"{\\n    return isNullOrEmpty(password) || !password.matches(buildPassRegex());\\n}"},{"name":"buildPassRegex","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    String charactersUnicode = \\\"\\\\\\\\u0021\\\\\\\\u00A1\\\\\\\\u007C\\\\\\\\u0027\\\\\\\\u00B4\\\\\\\\u0060\\\\\\\\u00A8\\\\\\\\u005E\\\\\\\\u002A\\\\\\\\u002B\\\\\\\\u0040\\\\\\\\u00B7\\\\\\\\u0023\\\\\\\\u0024\\\\\\\\u0025\\\\\\\\u0026\\\\\\\\u002F\\\\\\\\u007B\\\\\\\\u007D\\\\\\\\u0028\\\\\\\\u0029\\\\\\\\u003D\\\\\\\\u005C\\\\\\\\u002D\\\\\\\\u005F\\\\\\\\u003A\\\\\\\\u002E\\\\\\\\u003B\\\\\\\\u002C\\\\\\\\u003C\\\\\\\\u003E\\\\\\\\u003F\\\\\\\\u00BF\\\";\\n    String regex = \\\"^(?=.*[\\\\\\\\p{Ll}])(?=.*[\\\\\\\\p{Lu}])(?=.*\\\\\\\\p{N})(?=.*[%s])[\\\\\\\\p{L}\\\\\\\\p{N}%s]{8,}$\\\";\\n    return String.format(regex, charactersUnicode, charactersUnicode);\\n}"},{"name":"convertToJsonAsString","returnType":"String","parameters":"[Object obj]","javadoc":"","body":"{\\n    try {\\n        return new ObjectMapper().writeValueAsString(obj);\\n    } catch (JsonProcessingException e) {\\n        return \\\"{\\\\\\\"error\\\\\\\": \\\\\\\"Error converting to JSON.\\\\\\\"}\\\";\\n    }\\n}"},{"name":"convertToJsonAsBytes","returnType":"byte[]","parameters":"[Object obj]","javadoc":"","body":"{\\n    try {\\n        return new ObjectMapper().writeValueAsBytes(obj);\\n    } catch (JsonProcessingException e) {\\n        return \\\"{\\\\\\\"error\\\\\\\": \\\\\\\"Error converting to JSON.\\\\\\\"}\\\".getBytes();\\n    }\\n}"}]},{"name":"GlobalValues","methods":[]},{"name":"TitleCase","methods":[{"name":"all","returnType":"String","parameters":"[String toConvert]","javadoc":"","body":"{\\n    setExceptions();\\n    setCapitalWord(false);\\n    return toTitleSentence(toConvert);\\n}"},{"name":"withExceptions","returnType":"String","parameters":"[String toConvert, String... exceptions]","javadoc":"","body":"{\\n    setExceptions(exceptions);\\n    setCapitalWord(false);\\n    return toTitleSentence(toConvert);\\n}"},{"name":"withCAPITAL","returnType":"String","parameters":"[String toConvert, String... exceptions]","javadoc":"","body":"{\\n    setExceptions(exceptions);\\n    setCapitalWord(!toConvert.matches(UPPER_SENTENCE));\\n    return toTitleSentence(toConvert);\\n}"},{"name":"titleCase","returnType":"String","parameters":"[String toConvert]","javadoc":"","body":"{\\n    setCapitalWord(false);\\n    return toTitleSentence(toConvert);\\n}"},{"name":"titleCAPITAL","returnType":"String","parameters":"[String toConvert]","javadoc":"","body":"{\\n    setCapitalWord(!toConvert.matches(UPPER_SENTENCE));\\n    return toTitleSentence(toConvert);\\n}"},{"name":"toTitleSentence","returnType":"String","parameters":"[String toConvert]","javadoc":"","body":"{\\n    setTheInput(toConvert);\\n    setArrayOfConvertedWords();\\n    if (hasExceptions())\\n        rateFirstWordOfArray();\\n    return String.join(\\\" \\\", arrayWords);\\n}"},{"name":"setTheInput","returnType":"void","parameters":"[String input]","javadoc":"","body":"{\\n    TitleCase.theInput = input.trim().replaceAll(\\\"( )+\\\", \\\" \\\");\\n}"},{"name":"setArrayOfConvertedWords","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    TitleCase.arrayWords = Arrays.stream(theInput.split(\\\" \\\")).map(TitleCase::rateWords).toArray(String[]::new);\\n}"},{"name":"rateWords","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    return isExceptions(word) ? rateExceptions(word) : toTitleCase(word);\\n}"},{"name":"isExceptions","returnType":"boolean","parameters":"[String word]","javadoc":"","body":"{\\n    boolean isException = Arrays.stream(exceptions.split(\\\" \\\")).parallel().anyMatch(w -> w.equalsIgnoreCase(word));\\n    boolean isCapitalWord = capitalWord && word.matches(CAPITAL_WORD);\\n    return isException || isCapitalWord;\\n}"},{"name":"rateExceptions","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    boolean isException = Arrays.stream(exceptions.split(\\\" \\\")).parallel().anyMatch(w -> w.equals(word));\\n    return capitalWord || isException ? word : word.toLowerCase();\\n}"},{"name":"hasExceptions","returnType":"boolean","parameters":"[]","javadoc":"","body":"{\\n    return !TitleCase.exceptions.isEmpty();\\n}"},{"name":"rateFirstWordOfArray","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    boolean isFirstWordNonCapital = capitalWord && !arrayWords[0].matches(CAPITAL_WORD);\\n    if (!capitalWord || isFirstWordNonCapital) {\\n        arrayWords[0] = toTitleCase(arrayWords[0]);\\n    }\\n}"},{"name":"toTitleCase","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    return (word.matches(JUST_LETTERS)) ? titleJustLetters(word) : titleWithPunts(word);\\n}"},{"name":"titleJustLetters","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    return word.substring(0, 1).toUpperCase().concat(word.substring(1).toLowerCase());\\n}"},{"name":"titleWithPunts","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    builder = new StringBuilder();\\n    Arrays.stream(word.split(\\\"\\\")).forEach(TitleCase::append);\\n    return builder.toString();\\n}"},{"name":"append","returnType":"void","parameters":"[String letter]","javadoc":"","body":"{\\n    builder.append(lowOrUp(letter));\\n}"},{"name":"lowOrUp","returnType":"String","parameters":"[String letter]","javadoc":"","body":"{\\n    return conditionToUpper() ? letter.toUpperCase() : letter.toLowerCase();\\n}"},{"name":"conditionToUpper","returnType":"boolean","parameters":"[]","javadoc":"","body":"{\\n    if (builder.isEmpty())\\n        return true;\\n    String lastCharOnBuilder = String.valueOf(builder.charAt(builder.length() - 1));\\n    return lastCharOnBuilder.matches(\\\"\\\\\\\\p{Punct}|\\\\\\\\s\\\");\\n}"},{"name":"setCapitalWord","returnType":"void","parameters":"[boolean capitalWord]","javadoc":"","body":"{\\n    TitleCase.capitalWord = capitalWord;\\n}"},{"name":"setExceptions","returnType":"void","parameters":"[String... words]","javadoc":"","body":"{\\n    TitleCase.exceptions = Arrays.stream(words).parallel().map(TitleCase::concatAllVariations).collect(Collectors.joining(\\\" \\\"));\\n}"},{"name":"concatAllVariations","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    return word.concat(withSymbols(word)).concat(withWraps(word));\\n}"},{"name":"withSymbols","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    return Arrays.stream(SYMBOLS.split(\\\"\\\")).parallel().map(s -> String.format(\\\" %s%s %s%s%s %s%s\\\", s, word, s, word, s, word, s)).collect(Collectors.joining());\\n}"},{"name":"withWraps","returnType":"String","parameters":"[String word]","javadoc":"","body":"{\\n    builder = new StringBuilder();\\n    for (int i = 0; i < RIGHT_WRAPS.length; i++) {\\n        builder.append(String.format(\\\" %s%s%s\\\", RIGHT_WRAPS[i], word, LEFT_WRAPS[i]));\\n    }\\n    return builder.toString();\\n}"}]}]},"com.whatacook.cookers.model.constants":{"name":"com.whatacook.cookers.model.constants","classes":[]},"com.whatacook.cookers.config":{"name":"com.whatacook.cookers.config","classes":[{"name":"SecurityConfig","methods":[{"name":"filterChain","returnType":"SecurityWebFilterChain","parameters":"[ServerHttpSecurity httpSecurity, AnyRequestFilter anyRequestFilter, ReactiveAuthenticationManager reactiveAuthenticationManager]","javadoc":"","body":"{\\n    return httpSecurity.csrf(ServerHttpSecurity.CsrfSpec::disable).httpBasic(ServerHttpSecurity.HttpBasicSpec::disable).formLogin(ServerHttpSecurity.FormLoginSpec::disable).authenticationManager(reactiveAuthenticationManager).securityContextRepository(NoOpServerSecurityContextRepository.getInstance()).authorizeExchange(authorizeExchangeSpec -> authorizeExchangeSpec.pathMatchers(globalValues.getPathToCheckIfEmailAlreadyExists()).permitAll().pathMatchers(globalValues.getPathToJavaDoc()).permitAll().pathMatchers(globalValues.getPathToDirectoryJavadoc()).permitAll().pathMatchers(jwtUtil.getLoginUrl()).permitAll().pathMatchers(jwtUtil.getSignInUrl()).permitAll().pathMatchers(jwtUtil.getForgotPass()).permitAll().anyExchange().authenticated()).addFilterAt(anyRequestFilter, SecurityWebFiltersOrder.AUTHENTICATION).build();\\n}"},{"name":"passwordEncoder","returnType":"PasswordEncoder","parameters":"[]","javadoc":"","body":"{\\n    return new BCryptPasswordEncoder();\\n}"},{"name":"reactiveAuthenticationManager","returnType":"ReactiveAuthenticationManager","parameters":"[ReactiveUserDetailsService userDetailsService, PasswordEncoder passwordEncoder]","javadoc":"","body":"{\\n    var authenticationManager = new UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService);\\n    authenticationManager.setPasswordEncoder(passwordEncoder);\\n    return authenticationManager;\\n}"},{"name":"addResourceHandlers","returnType":"void","parameters":"[ResourceHandlerRegistry registry]","javadoc":"","body":"{\\n    registry.addResourceHandler(\\\"/api/javadoc/**\\\").addResourceLocations(\\\"file:/app/javadoc/\\\");\\n}"}]},{"name":"MongoConfig","methods":[{"name":"init","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    try {\\n        String URI = \\\"MONGO_URI_WHATACOOK_USERS\\\";\\n        String mongoUri = DockerConfig.readSecret(URI);\\n        if (StringUtils.hasText(mongoUri))\\n            System.setProperty(URI, mongoUri.trim());\\n        log.warn(\\\"Mongo URI : {}\\\", StringUtils.hasText(mongoUri));\\n    } catch (IOException e) {\\n        throw new RuntimeException(e);\\n    }\\n}"}]},{"name":"DockerConfig","methods":[{"name":"readSecret","returnType":"String","parameters":"[String secret]","javadoc":"","body":"{\\n    try {\\n        return new String(Files.readAllBytes(Paths.get(rootPath + secret))).trim();\\n    } catch (IOException e) {\\n        return System.getenv(secret);\\n    }\\n}"}]},{"name":"SpringMailConfig","methods":[{"name":"init","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    try {\\n        String USER = \\\"SPRING_MAIL_VALIDATION\\\";\\n        String APP_PASS = \\\"GMAIL_APP_PASSWORD\\\";\\n        springMailUser = DockerConfig.readSecret(USER);\\n        gMailAppPass = DockerConfig.readSecret(APP_PASS);\\n        if (StringUtils.hasText(springMailUser))\\n            System.setProperty(USER, springMailUser.trim());\\n        log.warn(\\\"springMailUser : {}\\\", StringUtils.hasText(springMailUser));\\n        if (StringUtils.hasText(gMailAppPass))\\n            System.setProperty(APP_PASS, gMailAppPass.trim());\\n        log.warn(\\\"springMailPass : {}\\\", StringUtils.hasText(gMailAppPass));\\n    } catch (IOException e) {\\n        throw new RuntimeException(e);\\n    }\\n}"},{"name":"getJavaMailSender","returnType":"JavaMailSender","parameters":"[]","javadoc":"","body":"{\\n    JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\\n    mailSender.setHost(\\\"smtp.gmail.com\\\");\\n    mailSender.setPort(587);\\n    mailSender.setUsername(springMailUser);\\n    mailSender.setPassword(gMailAppPass);\\n    Properties props = mailSender.getJavaMailProperties();\\n    props.put(\\\"mail.transport.protocol\\\", \\\"smtp\\\");\\n    props.put(\\\"mail.smtp.auth\\\", \\\"true\\\");\\n    props.put(\\\"mail.smtp.starttls.enable\\\", \\\"true\\\");\\n    return mailSender;\\n}"}]}]},"com.whatacook.cookers":{"name":"com.whatacook.cookers","classes":[{"name":"WhataCookUsersApplication","methods":[{"name":"main","returnType":"void","parameters":"[String[] args]","javadoc":"","body":"{\\n    SpringApplication.run(WhataCookUsersApplication.class, args);\\n}"}]}]},"com.whatacook.cookers.config.filter.implement":{"name":"com.whatacook.cookers.config.filter.implement","classes":[{"name":"EmailResendFlowHandlerImpl","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String emailToResend, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    return Mono.just(Objects.requireNonNull(emailToResend)).filter(Util::isValidEmail).flatMap(DAO::findByEmail).flatMap(userDTO -> activationService.findById(userDTO.get_id())).flatMap(activationDto -> authenticationManager.setAuthenticated(activationDto.getId(), null, exchange, chain)).switchIfEmpty(Mono.defer(() -> respondWithJson(exchange, error(\\\"Email not found.\\\"))));\\n}"},{"name":"respondWithJson","returnType":"Mono<Void>","parameters":"[ServerWebExchange exchange, Object response]","javadoc":"","body":"{\\n    if (!exchange.getResponse().isCommitted()) {\\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\\n        exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);\\n        byte[] jsonBytes = convertToJsonAsBytes(response);\\n        DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(jsonBytes);\\n        return exchange.getResponse().writeWith(Mono.just(dataBuffer));\\n    } else {\\n        return Mono.empty();\\n    }\\n}"}]},{"name":"ResponseErrorHtmlImpl","methods":[{"name":"send","returnType":"Mono<Void>","parameters":"[ServerWebExchange exchange, String htmlContent]","javadoc":"","body":"{\\n    if (!exchange.getResponse().isCommitted()) {\\n        exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST);\\n        exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_HTML);\\n        DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(htmlContent.getBytes(StandardCharsets.UTF_8));\\n        return exchange.getResponse().writeWith(Mono.just(dataBuffer));\\n    } else {\\n        return Mono.empty();\\n    }\\n}"}]},{"name":"AuthenticationManagerImpl","methods":[{"name":"setAuthenticated","returnType":"Mono<Void>","parameters":"[String userEmailOrId, String token, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    return userService.findByUsername(userEmailOrId).map(user -> new UsernamePasswordAuthenticationToken(user, token, user.getAuthorities())).cast(Authentication.class).flatMap(authentication -> chain.filter(exchange).contextWrite(ReactiveSecurityContextHolder.withAuthentication(authentication))).then();\\n}"}]},{"name":"ActivationCodeFlowHandlerImpl","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String activationCode, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    String FAIL_HTML_FOR_ACTIVATION = Htmls.FailActivation.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"PATH_TO_RESEND\\\", globalValues.getPathToResendActvationMail()).replace(\\\"EMAIL_WAC\\\", globalValues.getMailToWac());\\n    return activationService.findByCode(activationCode).flatMap(activationDto -> authenticationManager.setAuthenticated(activationDto.getId(), null, exchange, chain)).switchIfEmpty(Mono.defer(() -> responseErrorHtml.send(exchange, FAIL_HTML_FOR_ACTIVATION)));\\n}"}]},{"name":"EmailResetPasswordFlowHandlerImpl","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String resetCode, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    String FAIL_HTML_FOR_RESET = Htmls.FailReset.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"EMAIL_WAC\\\", globalValues.getMailToWac());\\n    return resetService.findByCode(resetCode).flatMap(resetDto -> authenticationManager.setAuthenticated(resetDto.getId(), null, exchange, chain)).switchIfEmpty(Mono.defer(() -> responseErrorHtml.send(exchange, FAIL_HTML_FOR_RESET.replace(\\\"errorDescriptionValue\\\", \\\"Code Not Found\\\")))).onErrorResume(throwable -> Mono.defer(() -> responseErrorHtml.send(exchange, FAIL_HTML_FOR_RESET.replace(\\\"errorDescriptionValue\\\", throwable.getMessage()))));\\n}"}]},{"name":"SetNewPasswordFlowHandlerImpl","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String codeToSet, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    String FAIL_HTML_FOR_RESET = Htmls.FailSetNewPassword.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"URL_FORGOT_PASS\\\", globalValues.getUrlForgotPassword()).replace(\\\"EMAIL_WAC\\\", globalValues.getMailToWac());\\n    return resetService.findByCode(codeToSet).flatMap(resetDto -> authenticationManager.setAuthenticated(resetDto.getId(), null, exchange, chain)).switchIfEmpty(Mono.defer(() -> responseErrorHtml.send(exchange, FAIL_HTML_FOR_RESET.replace(\\\"errorDescriptionValue\\\", \\\"Code Not Found\\\")))).onErrorResume(throwable -> Mono.defer(() -> responseErrorHtml.send(exchange, FAIL_HTML_FOR_RESET.replace(\\\"errorDescriptionValue\\\", throwable.getMessage()))));\\n}"}]},{"name":"TokenAuthenticationFlowHandlerImpl","methods":[{"name":"handle","returnType":"Mono<Void>","parameters":"[String requestToken, ServerWebExchange exchange, WebFilterChain chain]","javadoc":"","body":"{\\n    return Mono.justOrEmpty(requestToken).filter(token -> jwtUtil.hasToken(token) && jwtUtil.isValidToken(token)).flatMap(token -> {\\n        String tokenWithoutPrefix = jwtUtil.extractPrefix(token);\\n        String username = jwtUtil.getUsernameFromToken(tokenWithoutPrefix);\\n        return authenticationManager.setAuthenticated(username, tokenWithoutPrefix, exchange, chain);\\n    }).onErrorResume(e -> handleError(e, exchange));\\n}"},{"name":"handleError","returnType":"Mono<Void>","parameters":"[Throwable e, ServerWebExchange exchange]","javadoc":"","body":"{\\n    if (!exchange.getResponse().isCommitted()) {\\n        String errorMessage;\\n        if (e instanceof ExpiredJwtException)\\n            errorMessage = \\\"Token expired. Please login again.\\\";\\n        else if (e instanceof JwtException)\\n            errorMessage = \\\"Invalid token.\\\";\\n        else\\n            errorMessage = e.getMessage();\\n        return sendUnauthorizedResponse(exchange, errorMessage);\\n    } else {\\n        return Mono.empty();\\n    }\\n}"},{"name":"sendUnauthorizedResponse","returnType":"Mono<Void>","parameters":"[ServerWebExchange exchange, String errorMessage]","javadoc":"","body":"{\\n    HttpStatus status = HttpStatus.UNAUTHORIZED;\\n    ServerHttpResponse response = exchange.getResponse();\\n    response.setStatusCode(status);\\n    response.getHeaders().setContentType(MediaType.APPLICATION_JSON);\\n    Response errorResponse = error(errorMessage);\\n    byte[] bytes = convertToJsonAsBytes(errorResponse);\\n    DataBuffer buffer = response.bufferFactory().wrap(bytes);\\n    return response.writeWith(Mono.just(buffer));\\n}"}]}]},"com.whatacook.cookers.model.auth":{"name":"com.whatacook.cookers.model.auth","classes":[{"name":"AuthRequestDto","methods":[]},{"name":"ActivationDto","methods":[{"name":"to","returnType":"ActivationDto","parameters":"[UserDto user]","javadoc":"","body":"{\\n    ActivationDto activationDto = new ActivationDto();\\n    activationDto.setId(user.get_id());\\n    return activationDto;\\n}"},{"name":"generateCode","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    SecureRandom random = new SecureRandom();\\n    byte[] bytes = new byte[24];\\n    random.nextBytes(bytes);\\n    return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);\\n}"}]},{"name":"ResetDto","methods":[{"name":"to","returnType":"ResetDto","parameters":"[UserDto user]","javadoc":"","body":"{\\n    var resetDto = new ResetDto();\\n    resetDto.setId(user.get_id());\\n    return resetDto;\\n}"},{"name":"generateCode","returnType":"String","parameters":"[]","javadoc":"","body":"{\\n    SecureRandom random = new SecureRandom();\\n    byte[] bytes = new byte[64];\\n    random.nextBytes(bytes);\\n    return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);\\n}"}]}]},"com.whatacook.cookers.service.components":{"name":"com.whatacook.cookers.service.components","classes":[{"name":"LoginComponent","methods":[{"name":"validSpringUserToLogin","returnType":"Mono<UserDetails>","parameters":"[String userEmailOrId]","javadoc":"","body":"{\\n    return Mono.just(userEmailOrId).flatMap(info -> {\\n        if (Util.isValidEmail(info))\\n            return findUserByEmail(info);\\n        else\\n            return findUserById(info);\\n    });\\n}"},{"name":"findUserByEmail","returnType":"Mono<UserDetails>","parameters":"[String email]","javadoc":"","body":"{\\n    return DAO.findByEmail(email).switchIfEmpty(UserServiceException.mono(\\\"USER NOT FOUND!\\\")).flatMap(this::verifyAccountStatusByEmail).map(this::newValidUserByEmail);\\n}"},{"name":"verifyAccountStatusByEmail","returnType":"Mono<UserDto>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    final AccountStatus accountStatus = userDTO.getAccountStatus();\\n    if (EnumSet.of(OK, OFF, REQUEST_DELETE).contains(accountStatus))\\n        return Mono.just(userDTO);\\n    else if (MARKED_DELETE.equals(accountStatus))\\n        return deleteComponent.proceedIfApplicable(userDTO.toJson()).flatMap(response -> UserServiceException.mono(response.getMessage()));\\n    else\\n        return UserServiceException.mono(accountStatus.getDetails());\\n}"},{"name":"newValidUserByEmail","returnType":"UserDetails","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    Set<GrantedAuthority> authorities = listAuthorities(userDTO);\\n    authorities.add(new SimpleGrantedAuthority(\\\"ROLE_SELF\\\"));\\n    return new CustomUserDetails(userDTO.getEmail() + userDTO.get_id(), userDTO.getPassword(), authorities, userDTO.getEmail(), userDTO.get_id());\\n}"},{"name":"listAuthorities","returnType":"Set<GrantedAuthority>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return Arrays.stream(userDTO.getRoleType().get().split(\\\",\\\")).map(String::trim).map(role -> new SimpleGrantedAuthority(\\\"ROLE_\\\" + role)).collect(Collectors.toSet());\\n}"},{"name":"findUserById","returnType":"Mono<UserDetails>","parameters":"[String id]","javadoc":"","body":"{\\n    return DAO.findBy_id(id).switchIfEmpty(UserServiceException.mono(\\\"USER NOT FOUND!\\\")).flatMap(this::verifyAccountStatusById).map(this::newValidUserById);\\n}"},{"name":"verifyAccountStatusById","returnType":"Mono<UserDto>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    String errorMsg = \\\"Account Status Incorrect for this request: \\\" + userDTO.getAccountStatus().getDetails();\\n    if (EnumSet.of(AccountStatus.OK, AccountStatus.PENDING, AccountStatus.OUTDATED).contains(userDTO.getAccountStatus())) {\\n        return Mono.just(userDTO);\\n    } else {\\n        return UserServiceException.mono(errorMsg);\\n    }\\n}"},{"name":"newValidUserById","returnType":"UserDetails","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    Set<GrantedAuthority> authorities = listAuthorities(userDTO);\\n    authorities.add(new SimpleGrantedAuthority(\\\"ROLE_SELF\\\"));\\n    return new CustomUserDetails(userDTO.get_id(), userDTO.getPassword(), authorities, userDTO.getEmail(), userDTO.get_id());\\n}"}]},{"name":"UpdateComponent","methods":[{"name":"updateUser","returnType":"Mono<UserJson>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return DAO.findBy_id(userJson.get_id()).switchIfEmpty(UserServiceException.mono(\\\"User not found with this ID\\\", Map.of(\\\"_id\\\", userJson.get_id()))).flatMap(oldUser -> updatePlayerIfNecessary(oldUser, userJson)).flatMap(this::updateUserByDtoReturnJson);\\n}"},{"name":"updatePlayerIfNecessary","returnType":"Mono<UserDto>","parameters":"[UserDto oldUser, UserJson updateInfo]","javadoc":"","body":"{\\n    AtomicBoolean updated = new AtomicBoolean(false);\\n    return Mono.just(oldUser).flatMap(user -> {\\n        updateFirstName(user, updateInfo, updated);\\n        updateSurnames(user, updateInfo, updated);\\n        updateEmail(user, updateInfo, updated);\\n        updateBirthdate(user, updateInfo, updated);\\n        updatePassword(user, updateInfo, updated);\\n        updateAccountStatus(user, updateInfo, updated);\\n        if (!updated.get()) {\\n            return UserServiceException.mono(\\\"No update required or data is invalid.\\\");\\n        }\\n        return Mono.just(user);\\n    });\\n}"},{"name":"updateFirstName","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    boolean isFirstNameUpdated = updateAttribute(user::getFirstName, () -> verifyNames(updateInfo.getFirstName()), user::setFirstName);\\n    updated.set(isFirstNameUpdated || updated.get());\\n}"},{"name":"updateSurnames","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    boolean isSurnamesUpdated = updateAttribute(user::getSurNames, () -> verifyNames(updateInfo.getSurNames()), user::setSurNames);\\n    updated.set(isSurnamesUpdated || updated.get());\\n}"},{"name":"updateEmail","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    boolean isEmailUpdated = updateAttribute(user::getEmail, () -> verifyEmail(updateInfo.getEmail()), user::setEmail);\\n    updated.set(isEmailUpdated || updated.get());\\n}"},{"name":"updateBirthdate","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    boolean isBirthdateUpdated = updateAttribute(user::getBirthdate, () -> verifyBirthdate(updateInfo.getBirthdate()), user::setBirthdate);\\n    updated.set(isBirthdateUpdated || updated.get());\\n}"},{"name":"updatePassword","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    if (updateInfo.getNewPassword() != null) {\\n        Optional.ofNullable(updateInfo.getPassword()).filter(pwd -> Util.encryptMatches(pwd, user.getPassword())).orElseThrow(UserServiceException::passNotMatch);\\n        Optional.ofNullable(updateInfo.getNewPassword()).filter(Util::isValidPassword).ifPresent(newPwd -> {\\n            user.setPassword(Util.encryptPassword(newPwd));\\n            updated.set(true);\\n        });\\n    }\\n}"},{"name":"updateAccountStatus","returnType":"void","parameters":"[UserDto user, UserJson updateInfo, AtomicBoolean updated]","javadoc":"","body":"{\\n    if (updateInfo.getAccountStatus() != null) {\\n        boolean isCurrentStatusEligibleForUpdate = EnumSet.of(AccountStatus.OK, AccountStatus.OFF, AccountStatus.OUTDATED, AccountStatus.REQUEST_DELETE).contains(user.getAccountStatus());\\n        AccountStatus toUpdate = AccountStatus.valueOf(updateInfo.getAccountStatus());\\n        boolean isNewStatusValid = !AccountStatus.MARKED_DELETE.equals(toUpdate);\\n        if (isCurrentStatusEligibleForUpdate && isNewStatusValid) {\\n            boolean isAccountStatusUpdated = updateAttribute(user::getAccountStatus, () -> toUpdate, user::setAccountStatus);\\n            updated.set(isAccountStatusUpdated || updated.get());\\n        }\\n    }\\n}"},{"name":"updateUserByDtoReturnJson","returnType":"Mono<UserJson>","parameters":"[UserDto userToSave]","javadoc":"","body":"{\\n    return Mono.just(userToSave).flatMap(DAO::save).map(UserDto::toJson);\\n}"},{"name":"updateAttribute","returnType":"boolean","parameters":"[Supplier<T> original, Supplier<T> updated, Consumer<T> setter]","javadoc":"","body":"{\\n    T originalValue = original.get();\\n    T updatedValue = updated.get();\\n    if (updatedValue != null && !Objects.equals(originalValue, updatedValue)) {\\n        setter.accept(updatedValue);\\n        return true;\\n    }\\n    return false;\\n}"},{"name":"verifyNames","returnType":"String","parameters":"[String nameOrSurname]","javadoc":"","body":"{\\n    return Optional.ofNullable(nameOrSurname).map(Util::TitleCase).orElse(null);\\n}"},{"name":"verifyEmail","returnType":"String","parameters":"[String email]","javadoc":"","body":"{\\n    return Optional.ofNullable(email).filter(Util::isValidEmail).orElse(null);\\n}"},{"name":"verifyBirthdate","returnType":"LocalDate","parameters":"[LocalDate localDate]","javadoc":"","body":"{\\n    return Optional.ofNullable(localDate).filter(Util::isValidBirthdate).orElse(null);\\n}"}]},{"name":"ActivateComponent","methods":[{"name":"byActivationCodeSentByEmail","returnType":"Mono<String>","parameters":"[String activationCode]","javadoc":"","body":"{\\n    return Mono.just(activationCode).flatMap(activationService::findByCode).switchIfEmpty(UserServiceException.mono(\\\"This Code is Invalid\\\")).flatMap(activationDto -> {\\n        if (ChronoUnit.HOURS.between(activationDto.getExpiration(), LocalDateTime.now()) > 24)\\n            return UserServiceException.mono(\\\"This Code is Expired\\\");\\n        else\\n            return Mono.just(activationDto);\\n    }).flatMap(activationDto -> DAO.findBy_id(activationDto.getId()).flatMap(userDTO -> {\\n        if (userDTO.getAccountStatus() == AccountStatus.PENDING) {\\n            userDTO.setAccountStatus(AccountStatus.OK);\\n            return DAO.save(userDTO).then(activationService.deleteById(activationDto.getId())).thenReturn(userDTO);\\n        } else {\\n            return UserServiceException.mono(\\\"The Account Status is not correct to activate account\\\");\\n        }\\n    })).map(this::buildHtmlOkAccountActivatedContent).onErrorResume(this::buildHtmlFailAccountActivatedContent);\\n}"},{"name":"buildHtmlOkAccountActivatedContent","returnType":"String","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return Htmls.SuccessActivation.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"USER_NAME\\\", userDTO.getFirstName());\\n}"},{"name":"buildHtmlFailAccountActivatedContent","returnType":"Mono<String>","parameters":"[Throwable error]","javadoc":"","body":"{\\n    return Mono.just(Htmls.FailActivation.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"PATH_TO_RESEND\\\", globalValues.getPathToResendActvationMail()).replace(\\\"EMAIL_WAC\\\", globalValues.getMailToWac()));\\n}"},{"name":"resendActivationCode","returnType":"Mono<UserJson>","parameters":"[String email]","javadoc":"","body":"{\\n    return DAO.findByEmail(email).switchIfEmpty(UserServiceException.mono(\\\"This Email is Invalid\\\")).flatMap(userDTO -> activationService.findById(userDTO.get_id()).flatMap(activationDto -> {\\n        if (ChronoUnit.HOURS.between(activationDto.getExpiration(), LocalDateTime.now()) <= 24) {\\n            return emailService.sendActivationMail(activationDto, userDTO);\\n        } else {\\n            return emailService.createActivationCodeAndSendEmail(userDTO);\\n        }\\n    })).onErrorMap(UserServiceException::onErrorMap);\\n}"}]},{"name":"ResetComponent","methods":[{"name":"resetPasswordByCodeAndReturnNewPassForm","returnType":"Mono<String>","parameters":"[String resetCode]","javadoc":"","body":"{\\n    return Mono.just(resetCode).flatMap(resetService::findByCode).switchIfEmpty(UserServiceException.mono(\\\"This Code is Invalid\\\")).flatMap(resetDto -> {\\n        if (ChronoUnit.HOURS.between(resetDto.getExpiration(), LocalDateTime.now()) > 1)\\n            return UserServiceException.mono(\\\"This Code is Expired\\\");\\n        else\\n            return Mono.just(resetDto);\\n    }).flatMap(resetDto -> DAO.findBy_id(resetDto.getId()).flatMap(userDTO -> resetService.createNew(userDTO).flatMap(newCode -> {\\n        userDTO.setPassword(encryptPassword(newCode.getCode()));\\n        userDTO.setAccountStatus(AccountStatus.OUTDATED);\\n        return DAO.save(userDTO).thenReturn(newCode);\\n    }))).map(this::buildHtmlFormToSendNewPassword).onErrorMap(UserServiceException::onErrorMap);\\n}"},{"name":"buildHtmlFormToSendNewPassword","returnType":"String","parameters":"[ResetDto resetDto]","javadoc":"","body":"{\\n    String endPoint = globalValues.getUrlSetNewPassword() + resetDto.getCode();\\n    return Htmls.FormToSendNewPassword.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"RESET_CODE\\\", resetDto.getCode()).replace(\\\"ENDPOINT_RESET_PASS\\\", endPoint);\\n}"},{"name":"setNewPasswordByCode","returnType":"Mono<String>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return resetService.findByCode(userJson.get_id()).switchIfEmpty(UserServiceException.mono(\\\"No user was found\\\")).flatMap(resetDto -> {\\n        if (ChronoUnit.HOURS.between(resetDto.getExpiration(), LocalDateTime.now()) > 1)\\n            return UserServiceException.mono(\\\"This Code is Expired\\\");\\n        else\\n            return DAO.findBy_id(resetDto.getId());\\n    }).flatMap(userDTO -> {\\n        if (Util.encryptMatches(userJson.get_id(), userDTO.getPassword()) && Util.isValidPassword(userJson.getNewPassword())) {\\n            userDTO.setPassword(encryptPassword(userJson.getNewPassword()));\\n            return DAO.save(userDTO);\\n        } else\\n            return UserServiceException.mono(\\\"Reset code is invalid\\\");\\n    }).flatMap(this::buildHtmlSuccessSetNewPassword).onErrorResume(this::buildHtmlFailSetNewPassword);\\n}"},{"name":"buildHtmlSuccessSetNewPassword","returnType":"Mono<String>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return resetService.deleteById(userDTO.get_id()).then(Mono.fromCallable(() -> Htmls.SuccessSetNewPassword.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"USER_NAME\\\", userDTO.getFirstName())));\\n}"},{"name":"buildHtmlFailSetNewPassword","returnType":"Mono<String>","parameters":"[Throwable throwable]","javadoc":"","body":"{\\n    return Mono.just(Htmls.FailSetNewPassword.get().replace(\\\"LOGO_WAC\\\", globalValues.getUrlWacLogoPngSmall()).replace(\\\"EMAIL_WAC\\\", globalValues.getMailToWac()).replace(\\\"URL_FORGOT_PASS\\\", globalValues.getUrlForgotPassword()).replace(\\\"errorDescriptionValue\\\", throwable.getMessage()));\\n}"}]},{"name":"SaveComponent","methods":[{"name":"saveUser","returnType":"Mono<UserJson>","parameters":"[@Valid UserJustToSave userJustToSave]","javadoc":"","body":"{\\n    return Mono.just(userJustToSave).flatMap(this::validateAttributes).flatMap(this::checkEmailNotRegistered).flatMap(this::saveUserByJtsReturnDto).flatMap(emailService::createActivationCodeAndSendEmail);\\n}"},{"name":"validateAttributes","returnType":"Mono<UserJustToSave>","parameters":"[UserJustToSave userJustToSave]","javadoc":"","body":"{\\n    Map<String, Object> errors = new LinkedHashMap<>();\\n    if (isNullOrEmptyOrLiteralNull(userJustToSave.getEmail()))\\n        errors.put(\\\"email\\\", \\\"E-mail is missing!\\\");\\n    if (notValidEmail(userJustToSave.getEmail()))\\n        errors.put(\\\"email\\\", \\\"This email has invalid format!\\\");\\n    if (isNullOrEmptyOrLiteralNull(userJustToSave.getPassword()))\\n        errors.put(\\\"password\\\", \\\"Password is missing!\\\");\\n    if (notValidPassword(userJustToSave.getPassword()))\\n        errors.put(\\\"password\\\", \\\"Password is invalid format: 8 characters \\\" + \\\"-> uppercase lowercase letters numbers and special characters !\\\");\\n    if (isNullOrEmptyOrLiteralNull(userJustToSave.getFirstName()))\\n        errors.put(\\\"firstName\\\", \\\"First Name is missing!\\\");\\n    if (isNullOrEmptyOrLiteralNull(userJustToSave.getSurNames()))\\n        errors.put(\\\"surNames\\\", \\\"Last Name is missing!\\\");\\n    if (notValidBirthdate(userJustToSave.getBirthdate()))\\n        errors.put(\\\"birthdate\\\", \\\"Missing or invalid format : 'YYYY-MM-DD' and more than 7 years!\\\");\\n    if (!errors.isEmpty())\\n        return UserServiceException.mono(\\\"Look in content for errors\\\", errors);\\n    else\\n        return Mono.just(userJustToSave);\\n}"},{"name":"checkEmailNotRegistered","returnType":"Mono<UserJustToSave>","parameters":"[UserJustToSave userJustToSave]","javadoc":"","body":"{\\n    return DAO.existsByEmail(userJustToSave.getEmail()).flatMap(exists -> exists ? UserServiceException.mono(\\\"This email is already registered!\\\") : Mono.just(userJustToSave));\\n}"},{"name":"saveUserByJtsReturnDto","returnType":"Mono<UserDto>","parameters":"[UserJustToSave userJustToSave]","javadoc":"","body":"{\\n    return Mono.just(userJustToSave).flatMap(user -> {\\n        user.setFirstName(TitleCase(user.getFirstName()));\\n        user.setSurNames(TitleCase(user.getSurNames()));\\n        return Mono.just(user);\\n    }).map(UserJustToSave::toUserDTO).flatMap(DAO::save).doOnError(UserServiceException::doOnErrorMap);\\n}"}]},{"name":"DeleteComponent","methods":[{"name":"proceedIfApplicable","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return DAO.findBy_id(userJson.get_id()).switchIfEmpty(UserServiceException.mono(\\\"User not found\\\")).flatMap(this::handleStatusChange);\\n}"},{"name":"handleStatusChange","returnType":"Mono<Response>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    return switch(userDTO.getAccountStatus()) {\\n        case OK ->\\n            handleOkStatus(userDTO);\\n        case REQUEST_DELETE ->\\n            handleRequestDeleteStatus(userDTO);\\n        case MARKED_DELETE ->\\n            handleMarkedDeleteStatus(userDTO);\\n        default ->\\n            UserServiceException.mono(\\\"Invalid account status to request deletion\\\");\\n    };\\n}"},{"name":"handleOkStatus","returnType":"Mono<Response>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    userDTO.setAccountStatus(AccountStatus.REQUEST_DELETE);\\n    userDTO.setRequestDeleteDate(LocalDateTime.now());\\n    return DAO.save(userDTO).map(savedUserDTO -> Response.success(\\\"REQUEST_DELETE set, you have one year to revoke the deletion\\\", savedUserDTO.toJson())).onErrorResume(UserServiceException::mono);\\n}"},{"name":"handleRequestDeleteStatus","returnType":"Mono<Response>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    LocalDateTime requestDeleteDate = userDTO.getRequestDeleteDate();\\n    if (requestDeleteDate != null && ChronoUnit.YEARS.between(requestDeleteDate, LocalDateTime.now()) >= 1) {\\n        userDTO.setAccountStatus(AccountStatus.MARKED_DELETE);\\n        return DAO.save(userDTO).map(savedUserDTO -> Response.success(\\\"MARKED_DELETE set, your account has been invalidated you have one year to request your data\\\", savedUserDTO.toJson())).onErrorResume(UserServiceException::mono);\\n    }\\n    return Mono.just(Response.success(\\\"REQUEST_DELETE request is not yet a year old\\\", userDTO.toJson()));\\n}"},{"name":"handleMarkedDeleteStatus","returnType":"Mono<Response>","parameters":"[UserDto userDTO]","javadoc":"","body":"{\\n    LocalDateTime requestDeleteDate = userDTO.getRequestDeleteDate();\\n    if (requestDeleteDate != null && ChronoUnit.YEARS.between(requestDeleteDate, LocalDateTime.now()) >= 2) {\\n        return DAO.delete(userDTO).thenReturn(Response.success(\\\"Your account has been terminated\\\", true)).onErrorResume(UserServiceException::mono);\\n    }\\n    String message = \\\"Your account is set to be deleted, but you still have time to request your data\\\";\\n    return Mono.just(Response.success(message, userDTO.toJson()));\\n}"}]},{"name":"FindComponent","methods":[{"name":"checkIfExistsByEmail","returnType":"Mono<Boolean>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return Mono.just(userJson).map(UserJson::getEmail).filter(Util::isValidEmail).flatMap(DAO::existsByEmail).switchIfEmpty(UserServiceException.mono(\\\"Email not found!\\\")).doOnError(UserServiceException::onErrorMap);\\n}"},{"name":"findUserByEmail","returnType":"Mono<UserJson>","parameters":"[UserJson userJson]","javadoc":"","body":"{\\n    return Mono.just(userJson).map(UserJson::getEmail).filter(Util::isValidEmail).flatMap(DAO::findByEmail).switchIfEmpty(UserServiceException.mono(\\\"This user does not exist or email is invalid!\\\")).map(UserDto::toJson).doOnError(UserServiceException::onErrorMap);\\n}"}]}]},"com.whatacook.cookers.service.contracts":{"name":"com.whatacook.cookers.service.contracts","classes":[{"name":"ResetDao","methods":[{"name":"findByCode","returnType":"Mono<ResetDto>","parameters":"[String code]","javadoc":"","body":""}]},{"name":"UserAccessContractModel","methods":[{"name":"existsByEmail","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":""},{"name":"readOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":""},{"name":"updateOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":""},{"name":"deleteOne","returnType":"Mono<Response>","parameters":"[UserJson userJson]","javadoc":"","body":""}]},{"name":"ActivationDao","methods":[{"name":"findByCode","returnType":"Mono<ActivationDto>","parameters":"[String code]","javadoc":"","body":""}]},{"name":"UserDao","methods":[{"name":"findByEmail","returnType":"Mono<UserDto>","parameters":"[String email]","javadoc":"","body":""},{"name":"findBy_id","returnType":"Mono<UserDto>","parameters":"[String _id]","javadoc":"","body":""},{"name":"existsByEmail","returnType":"Mono<Boolean>","parameters":"[String email]","javadoc":"","body":""}]},{"name":"FavoriteDao","methods":[]}]},"com.whatacook.cookers.model.exceptions":{"name":"com.whatacook.cookers.model.exceptions","classes":[{"name":"UserServiceException","methods":[{"name":"mono","returnType":"Mono<T>","parameters":"[String message]","javadoc":"","body":"{\\n    return Mono.error(new UserServiceException(message));\\n}"},{"name":"mono","returnType":"Mono<T>","parameters":"[String message, Map<String, Object> errors]","javadoc":"","body":"{\\n    return Mono.error(new UserServiceException(message, errors));\\n}"},{"name":"mono","returnType":"Mono<T>","parameters":"[Throwable e]","javadoc":"","body":"{\\n    return Mono.error(new UserServiceException(e.getMessage()));\\n}"},{"name":"doOnErrorMap","returnType":"void","parameters":"[Throwable throwable]","javadoc":"","body":"{\\n    throw new UserServiceException(throwable.getMessage());\\n}"},{"name":"onErrorMap","returnType":"Throwable","parameters":"[Throwable throwable]","javadoc":"","body":"{\\n    return new UserServiceException(throwable.getMessage());\\n}"},{"name":"passNotMatch","returnType":"UserServiceException","parameters":"[]","javadoc":"","body":"{\\n    return new UserServiceException(\\\"Password doesn't match!\\\");\\n}"}]}]},"com.whatacook.cookers.config.parser":{"name":"com.whatacook.cookers.config.parser","classes":[{"name":"JavaParserAnalyzer","methods":[{"name":"analyze","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    File projectDir = new File(OUTPUT_DIR);\\n    if (!projectDir.exists() || !projectDir.isDirectory()) {\\n        log.error(\\\"El directorio especificado no existe: {}\\\", OUTPUT_DIR);\\n        return;\\n    }\\n    Map<String, PackageInfo> packageMap = new HashMap<>();\\n    try {\\n        Files.createDirectories(Paths.get(OUTPUT_DIR));\\n        final Path pathTo_OUTPUT_FILE = Paths.get(OUTPUT_FILE);\\n        Files.deleteIfExists(pathTo_OUTPUT_FILE);\\n        extractData(projectDir, packageMap);\\n        String jsonString = toJsonString(packageMap);\\n        Files.write(pathTo_OUTPUT_FILE, jsonString.getBytes());\\n    } catch (IOException e) {\\n        log.error(\\\"Error while analyzing Java parser: {}\\\", e.getMessage(), e);\\n    }\\n}"},{"name":"escapeJson","returnType":"String","parameters":"[String input]","javadoc":"","body":"{\\n    if (input == null) {\\n        return \\\"\\\";\\n    }\\n    return input.replace(\\\"\\\\\\\\\\\", \\\"\\\\\\\\\\\\\\\\\\\").replace(\\\"\\\\\\\"\\\", \\\"\\\\\\\\\\\\\\\"\\\").replace(\\\"\\\\n\\\", \\\"\\\\\\\\n\\\").replace(\\\"\\\\r\\\", \\\"\\\\\\\\r\\\").replace(\\\"\\\\t\\\", \\\"\\\\\\\\t\\\");\\n}"},{"name":"toJsonString","returnType":"String","parameters":"[Map<String, PackageInfo> packageMap]","javadoc":"","body":"{\\n    ObjectMapper mapper = new ObjectMapper();\\n    try {\\n        return mapper.writeValueAsString(packageMap);\\n    } catch (IOException e) {\\n        log.error(\\\"Error converting to JSON string: {}\\\", e.getMessage(), e);\\n        return \\\"{}\\\";\\n    }\\n}"},{"name":"extractData","returnType":"void","parameters":"[File projectDir, Map<String, PackageInfo> packageMap]","javadoc":"","body":"{\\n    ParserConfiguration parserConfiguration = new ParserConfiguration().setAttributeComments(false);\\n    JavaParser javaParser = new JavaParser(parserConfiguration);\\n    try (Stream<java.nio.file.Path> paths = Files.walk(projectDir.toPath())) {\\n        paths.filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\\\".java\\\")).forEach(path -> {\\n            try {\\n                CompilationUnit cu = javaParser.parse(path).getResult().orElseThrow(IOException::new);\\n                cu.accept(new PackageVisitor(), packageMap);\\n            } catch (IOException e) {\\n                log.error(\\\"Error while extractData() in JavaParserAnalyzer: {}\\\", e.getMessage(), e);\\n            }\\n        });\\n    }\\n}"}]},{"name":"PackageVisitor","methods":[{"name":"visit","returnType":"void","parameters":"[CompilationUnit cu, Map<String, PackageInfo> collector]","javadoc":"","body":"{\\n    super.visit(cu, collector);\\n    String packageName = cu.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\\\"default\\\");\\n    PackageInfo packageInfo = collector.computeIfAbsent(packageName, PackageInfo::new);\\n    cu.findAll(ClassOrInterfaceDeclaration.class).forEach(c -> {\\n        ClassInfo classInfo = new ClassInfo();\\n        classInfo.setName(c.getNameAsString());\\n        c.getMethods().forEach(m -> {\\n            MethodInfo methodInfo = new MethodInfo();\\n            methodInfo.setName(m.getNameAsString());\\n            methodInfo.setReturnType(m.getTypeAsString());\\n            methodInfo.setParameters(m.getParameters().toString());\\n            methodInfo.setJavadoc(m.getJavadoc().map(javadoc -> escapeJson(javadoc.toString())).orElse(\\\"\\\"));\\n            methodInfo.setBody(m.getBody().map(body -> escapeJson(body.toString())).orElse(\\\"\\\"));\\n            classInfo.getMethods().add(methodInfo);\\n        });\\n        packageInfo.getClasses().add(classInfo);\\n    });\\n}"}]},{"name":"PackageInfo","methods":[]},{"name":"ClassInfo","methods":[]},{"name":"MethodInfo","methods":[]},{"name":"JavaSourceAggregator","methods":[{"name":"aggregateSourceCode","returnType":"void","parameters":"[]","javadoc":"","body":"{\\n    File sourceDir = new File(SOURCE_DIR);\\n    if (!sourceDir.exists() || !sourceDir.isDirectory()) {\\n        log.error(\\\"El directorio especificado no existe: {}\\\", SOURCE_DIR);\\n        return;\\n    }\\n    try {\\n        final Path pathToOutputFile = Paths.get(OUTPUT_FILE);\\n        Files.deleteIfExists(pathToOutputFile);\\n        try (BufferedWriter writer = Files.newBufferedWriter(pathToOutputFile, StandardOpenOption.CREATE)) {\\n            aggregateSourceFiles(sourceDir, writer);\\n        }\\n    } catch (IOException e) {\\n        log.error(\\\"Error while aggregating source code: {}\\\", e.getMessage(), e);\\n    }\\n}"},{"name":"aggregateSourceFiles","returnType":"void","parameters":"[File directory, BufferedWriter writer]","javadoc":"","body":"{\\n    try (Stream<Path> paths = Files.walk(directory.toPath())) {\\n        paths.filter(Files::isRegularFile).filter(path -> path.toString().endsWith(\\\".java\\\")).forEach(path -> {\\n            try (Stream<String> lines = Files.lines(path)) {\\n                lines.forEach(line -> {\\n                    try {\\n                        writer.write(line);\\n                        writer.newLine();\\n                    } catch (IOException e) {\\n                        log.error(\\\"Error writing line to output file: {}\\\", e.getMessage(), e);\\n                    }\\n                });\\n                writer.write(System.lineSeparator());\\n            } catch (IOException e) {\\n                log.error(\\\"Error reading file {}: {}\\\", path, e.getMessage(), e);\\n            }\\n        });\\n    }\\n}"}]},{"name":"LocalEnvironmentCondition","methods":[{"name":"matches","returnType":"boolean","parameters":"[ConditionContext context, AnnotatedTypeMetadata metadata]","javadoc":"","body":"{\\n    String environment = System.getenv(\\\"WHATA_COOK_ENV\\\");\\n    return \\\"local\\\".equals(environment);\\n}"}]}]}}